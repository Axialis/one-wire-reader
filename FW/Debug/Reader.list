
Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004748  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b14  08004b14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b1c  08004b1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b20  08004b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  08004b94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004b94  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a396  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c1b  00000000  00000000  0002a42f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  0002c050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  0002c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e959  00000000  00000000  0002d060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f74  00000000  00000000  0004b9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000abf3b  00000000  00000000  0005492d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100868  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  001008e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08004914 	.word	0x08004914

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08004914 	.word	0x08004914

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b974 	b.w	8000534 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	468c      	mov	ip, r1
 800026a:	4604      	mov	r4, r0
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d14b      	bne.n	800030a <__udivmoddi4+0xa6>
 8000272:	428a      	cmp	r2, r1
 8000274:	4615      	mov	r5, r2
 8000276:	d967      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0720 	rsb	r7, r2, #32
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	fa20 f707 	lsr.w	r7, r0, r7
 800028a:	4095      	lsls	r5, r2
 800028c:	ea47 0c03 	orr.w	ip, r7, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000296:	fbbc f7fe 	udiv	r7, ip, lr
 800029a:	fa1f f885 	uxth.w	r8, r5
 800029e:	fb0e c317 	mls	r3, lr, r7, ip
 80002a2:	fb07 f908 	mul.w	r9, r7, r8
 80002a6:	0c21      	lsrs	r1, r4, #16
 80002a8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ac:	4599      	cmp	r9, r3
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x60>
 80002b0:	18eb      	adds	r3, r5, r3
 80002b2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002b6:	f080 811c 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002ba:	4599      	cmp	r9, r3
 80002bc:	f240 8119 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	3f02      	subs	r7, #2
 80002c2:	442b      	add	r3, r5
 80002c4:	eba3 0309 	sub.w	r3, r3, r9
 80002c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d0:	fb00 f108 	mul.w	r1, r0, r8
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	42a1      	cmp	r1, r4
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002de:	192c      	adds	r4, r5, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 8107 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002e8:	42a1      	cmp	r1, r4
 80002ea:	f240 8104 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	3802      	subs	r0, #2
 80002f0:	442c      	add	r4, r5
 80002f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f6:	2700      	movs	r7, #0
 80002f8:	1a64      	subs	r4, r4, r1
 80002fa:	b11e      	cbz	r6, 8000304 <__udivmoddi4+0xa0>
 80002fc:	2300      	movs	r3, #0
 80002fe:	40d4      	lsrs	r4, r2
 8000300:	e9c6 4300 	strd	r4, r3, [r6]
 8000304:	4639      	mov	r1, r7
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xbe>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ec 	beq.w	80004ec <__udivmoddi4+0x288>
 8000314:	2700      	movs	r7, #0
 8000316:	e9c6 0100 	strd	r0, r1, [r6]
 800031a:	4638      	mov	r0, r7
 800031c:	4639      	mov	r1, r7
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f783 	clz	r7, r3
 8000326:	2f00      	cmp	r7, #0
 8000328:	d148      	bne.n	80003bc <__udivmoddi4+0x158>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd0>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fb 	bhi.w	800052a <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469c      	mov	ip, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa0>
 8000342:	e9c6 4c00 	strd	r4, ip, [r6]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa0>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xe8>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 808f 	bne.w	8000474 <__udivmoddi4+0x210>
 8000356:	2701      	movs	r7, #1
 8000358:	1b49      	subs	r1, r1, r5
 800035a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800035e:	fa1f f985 	uxth.w	r9, r5
 8000362:	fbb1 fef8 	udiv	lr, r1, r8
 8000366:	fb08 111e 	mls	r1, r8, lr, r1
 800036a:	fb09 f00e 	mul.w	r0, r9, lr
 800036e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000372:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000376:	4298      	cmp	r0, r3
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x126>
 800037a:	18eb      	adds	r3, r5, r3
 800037c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4298      	cmp	r0, r3
 8000384:	f200 80cd 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000388:	468e      	mov	lr, r1
 800038a:	1a1b      	subs	r3, r3, r0
 800038c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000390:	fb08 3310 	mls	r3, r8, r0, r3
 8000394:	fb09 f900 	mul.w	r9, r9, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800039e:	45a1      	cmp	r9, r4
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a2:	192c      	adds	r4, r5, r4
 80003a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f200 80b6 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80003b0:	4618      	mov	r0, r3
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003ba:	e79e      	b.n	80002fa <__udivmoddi4+0x96>
 80003bc:	f1c7 0520 	rsb	r5, r7, #32
 80003c0:	40bb      	lsls	r3, r7
 80003c2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa21 f405 	lsr.w	r4, r1, r5
 80003ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003d6:	fa1f f88c 	uxth.w	r8, ip
 80003da:	fb0e 4419 	mls	r4, lr, r9, r4
 80003de:	fa20 f305 	lsr.w	r3, r0, r5
 80003e2:	40b9      	lsls	r1, r7
 80003e4:	fb09 fa08 	mul.w	sl, r9, r8
 80003e8:	4319      	orrs	r1, r3
 80003ea:	0c0b      	lsrs	r3, r1, #16
 80003ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	fa02 f207 	lsl.w	r2, r2, r7
 80003f6:	fa00 f307 	lsl.w	r3, r0, r7
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f109 30ff 	add.w	r0, r9, #4294967295
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	45a2      	cmp	sl, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a9 0902 	sub.w	r9, r9, #2
 8000412:	4464      	add	r4, ip
 8000414:	eba4 040a 	sub.w	r4, r4, sl
 8000418:	fbb4 f0fe 	udiv	r0, r4, lr
 800041c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000420:	fb00 fa08 	mul.w	sl, r0, r8
 8000424:	b289      	uxth	r1, r1
 8000426:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800042a:	45a2      	cmp	sl, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	d26b      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000438:	45a2      	cmp	sl, r4
 800043a:	d969      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043c:	3802      	subs	r0, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000444:	fba0 8902 	umull	r8, r9, r0, r2
 8000448:	eba4 040a 	sub.w	r4, r4, sl
 800044c:	454c      	cmp	r4, r9
 800044e:	4641      	mov	r1, r8
 8000450:	46ce      	mov	lr, r9
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d069      	beq.n	800052e <__udivmoddi4+0x2ca>
 800045a:	1a5a      	subs	r2, r3, r1
 800045c:	eb64 040e 	sbc.w	r4, r4, lr
 8000460:	fa04 f505 	lsl.w	r5, r4, r5
 8000464:	fa22 f307 	lsr.w	r3, r2, r7
 8000468:	40fc      	lsrs	r4, r7
 800046a:	431d      	orrs	r5, r3
 800046c:	e9c6 5400 	strd	r5, r4, [r6]
 8000470:	2700      	movs	r7, #0
 8000472:	e747      	b.n	8000304 <__udivmoddi4+0xa0>
 8000474:	4095      	lsls	r5, r2
 8000476:	f1c2 0320 	rsb	r3, r2, #32
 800047a:	fa21 f003 	lsr.w	r0, r1, r3
 800047e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000482:	fbb0 f7f8 	udiv	r7, r0, r8
 8000486:	fa1f f985 	uxth.w	r9, r5
 800048a:	fb08 0017 	mls	r0, r8, r7, r0
 800048e:	fa24 f303 	lsr.w	r3, r4, r3
 8000492:	4091      	lsls	r1, r2
 8000494:	fb07 fc09 	mul.w	ip, r7, r9
 8000498:	430b      	orrs	r3, r1
 800049a:	0c19      	lsrs	r1, r3, #16
 800049c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a0:	458c      	cmp	ip, r1
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d907      	bls.n	80004b8 <__udivmoddi4+0x254>
 80004a8:	1869      	adds	r1, r5, r1
 80004aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ae:	d231      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b0:	458c      	cmp	ip, r1
 80004b2:	d92f      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	3f02      	subs	r7, #2
 80004b6:	4429      	add	r1, r5
 80004b8:	eba1 010c 	sub.w	r1, r1, ip
 80004bc:	fbb1 f0f8 	udiv	r0, r1, r8
 80004c0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004c4:	fb00 fe09 	mul.w	lr, r0, r9
 80004c8:	b299      	uxth	r1, r3
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	458e      	cmp	lr, r1
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x27e>
 80004d2:	1869      	adds	r1, r5, r1
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d218      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d916      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004de:	3802      	subs	r0, #2
 80004e0:	4429      	add	r1, r5
 80004e2:	eba1 010e 	sub.w	r1, r1, lr
 80004e6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4637      	mov	r7, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e708      	b.n	8000304 <__udivmoddi4+0xa0>
 80004f2:	460f      	mov	r7, r1
 80004f4:	e6e6      	b.n	80002c4 <__udivmoddi4+0x60>
 80004f6:	4618      	mov	r0, r3
 80004f8:	e6fb      	b.n	80002f2 <__udivmoddi4+0x8e>
 80004fa:	4543      	cmp	r3, r8
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb8 0102 	subs.w	r1, r8, r2
 8000502:	eb69 020c 	sbc.w	r2, r9, ip
 8000506:	3801      	subs	r0, #1
 8000508:	4696      	mov	lr, r2
 800050a:	e7a4      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050c:	4618      	mov	r0, r3
 800050e:	e7e8      	b.n	80004e2 <__udivmoddi4+0x27e>
 8000510:	4608      	mov	r0, r1
 8000512:	e795      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000514:	4607      	mov	r7, r0
 8000516:	e7cf      	b.n	80004b8 <__udivmoddi4+0x254>
 8000518:	4681      	mov	r9, r0
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3802      	subs	r0, #2
 800051e:	442c      	add	r4, r5
 8000520:	e747      	b.n	80003b2 <__udivmoddi4+0x14e>
 8000522:	f1ae 0e02 	sub.w	lr, lr, #2
 8000526:	442b      	add	r3, r5
 8000528:	e72f      	b.n	800038a <__udivmoddi4+0x126>
 800052a:	4638      	mov	r0, r7
 800052c:	e707      	b.n	800033e <__udivmoddi4+0xda>
 800052e:	4637      	mov	r7, r6
 8000530:	e6e8      	b.n	8000304 <__udivmoddi4+0xa0>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <DS2842Reset>:
extern I2C_HandleTypeDef hi2c1;

Lcd_HandleTypeDef lcd;

void DS2842Reset(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af02      	add	r7, sp, #8
	uint8_t stat[1] = {0x00};
 800053e:	2300      	movs	r3, #0
 8000540:	713b      	strb	r3, [r7, #4]

	DS2482SendCommand(DS2482_CMD_RESET);
 8000542:	20f0      	movs	r0, #240	; 0xf0
 8000544:	f000 f834 	bl	80005b0 <DS2482SendCommand>

	while(1){

		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 8000548:	1d3a      	adds	r2, r7, #4
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	2131      	movs	r1, #49	; 0x31
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <DS2842Reset+0x38>)
 8000556:	f002 f9c5 	bl	80028e4 <HAL_I2C_Master_Receive>
		if((stat[0] & 0xF7) == 0x10)
 800055a:	793b      	ldrb	r3, [r7, #4]
 800055c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8000560:	2b10      	cmp	r3, #16
 8000562:	d000      	beq.n	8000566 <DS2842Reset+0x2e>
		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 8000564:	e7f0      	b.n	8000548 <DS2842Reset+0x10>
		{
			break;
 8000566:	bf00      	nop
		}
	}
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000f4 	.word	0x200000f4

08000574 <DS2842Configuration>:

void DS2842Configuration(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
	uint8_t stat[1] = {0x00};
 800057a:	2300      	movs	r3, #0
 800057c:	713b      	strb	r3, [r7, #4]

	DS2482SendCommandData(DS2482_CMD_WRITE_CONFIG, 0x00);
 800057e:	2100      	movs	r1, #0
 8000580:	20d2      	movs	r0, #210	; 0xd2
 8000582:	f000 f82d 	bl	80005e0 <DS2482SendCommandData>

	while(1){

		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 8000586:	1d3a      	adds	r2, r7, #4
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2131      	movs	r1, #49	; 0x31
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <DS2842Configuration+0x38>)
 8000594:	f002 f9a6 	bl	80028e4 <HAL_I2C_Master_Receive>
		if(stat[0] == 0x00)
 8000598:	793b      	ldrb	r3, [r7, #4]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d000      	beq.n	80005a0 <DS2842Configuration+0x2c>
		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 800059e:	e7f2      	b.n	8000586 <DS2842Configuration+0x12>
		{
			break;
 80005a0:	bf00      	nop
		}
	}
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000f4 	.word	0x200000f4

080005b0 <DS2482SendCommand>:

void DS2482SendCommand(uint8_t cmd)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[1] = {cmd};
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, WRITE_ADDRESS, temp1, sizeof(temp1), HAL_MAX_DELAY);
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	2130      	movs	r1, #48	; 0x30
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <DS2482SendCommand+0x2c>)
 80005ce:	f002 f88b 	bl	80026e8 <HAL_I2C_Master_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000f4 	.word	0x200000f4

080005e0 <DS2482SendCommandData>:

void DS2482SendCommandData(uint8_t cmd, uint8_t data)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
	uint8_t temp1[2] = {cmd, data};
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	733b      	strb	r3, [r7, #12]
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, WRITE_ADDRESS, temp1, sizeof(temp1), HAL_MAX_DELAY);
 80005f8:	f107 020c 	add.w	r2, r7, #12
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2302      	movs	r3, #2
 8000604:	2130      	movs	r1, #48	; 0x30
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <DS2482SendCommandData+0x34>)
 8000608:	f002 f86e 	bl	80026e8 <HAL_I2C_Master_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000f4 	.word	0x200000f4

08000618 <OWReset>:

void OWReset(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
	uint8_t stat[1] = {0x00};
 800061e:	2300      	movs	r3, #0
 8000620:	713b      	strb	r3, [r7, #4]

	DS2482SendCommand(DS2482_CMD_1WIRE_RESET);
 8000622:	20b4      	movs	r0, #180	; 0xb4
 8000624:	f7ff ffc4 	bl	80005b0 <DS2482SendCommand>

	while(1){

		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	2131      	movs	r1, #49	; 0x31
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <OWReset+0x38>)
 8000636:	f002 f955 	bl	80028e4 <HAL_I2C_Master_Receive>
		if((stat[0] & DS2482_REG_STS_1WB) == 0x00)
 800063a:	793b      	ldrb	r3, [r7, #4]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d000      	beq.n	8000646 <OWReset+0x2e>
		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 8000644:	e7f0      	b.n	8000628 <OWReset+0x10>
		{
			break;
 8000646:	bf00      	nop
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000f4 	.word	0x200000f4

08000654 <OWWriteByte>:

void OWWriteByte(uint8_t byte)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	uint8_t stat[1] = {0x00};
 800065e:	2300      	movs	r3, #0
 8000660:	733b      	strb	r3, [r7, #12]

	DS2482SendCommandData(DS2482_CMD_1WIRE_WRITE_BYTE, byte);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4619      	mov	r1, r3
 8000666:	20a5      	movs	r0, #165	; 0xa5
 8000668:	f7ff ffba 	bl	80005e0 <DS2482SendCommandData>

	while(1){

		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 800066c:	f107 020c 	add.w	r2, r7, #12
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	2131      	movs	r1, #49	; 0x31
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <OWWriteByte+0x44>)
 800067c:	f002 f932 	bl	80028e4 <HAL_I2C_Master_Receive>
		if((stat[0] & DS2482_REG_STS_1WB) == 0x00)
 8000680:	7b3b      	ldrb	r3, [r7, #12]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	2b00      	cmp	r3, #0
 8000688:	d000      	beq.n	800068c <OWWriteByte+0x38>
		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 800068a:	e7ef      	b.n	800066c <OWWriteByte+0x18>
		{
			break;
 800068c:	bf00      	nop
		}
	}
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000f4 	.word	0x200000f4

0800069c <OWReadByte>:

uint8_t OWReadByte(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af02      	add	r7, sp, #8
	uint8_t stat[1] = {0x00};
 80006a2:	2300      	movs	r3, #0
 80006a4:	713b      	strb	r3, [r7, #4]
	uint8_t data[1] = {0x00};
 80006a6:	2300      	movs	r3, #0
 80006a8:	703b      	strb	r3, [r7, #0]

	DS2482SendCommand(DS2482_CMD_1WIRE_READ_BYTE);
 80006aa:	2096      	movs	r0, #150	; 0x96
 80006ac:	f7ff ff80 	bl	80005b0 <DS2482SendCommand>

	while(1){

		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 80006b0:	1d3a      	adds	r2, r7, #4
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	2131      	movs	r1, #49	; 0x31
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <OWReadByte+0x58>)
 80006be:	f002 f911 	bl	80028e4 <HAL_I2C_Master_Receive>
		if((stat[0] & DS2482_REG_STS_1WB) == 0x00)
 80006c2:	793b      	ldrb	r3, [r7, #4]
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d000      	beq.n	80006ce <OWReadByte+0x32>
		HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, stat, 1, HAL_MAX_DELAY);
 80006cc:	e7f0      	b.n	80006b0 <OWReadByte+0x14>
		{
			break;
 80006ce:	bf00      	nop
		}
	}

	DS2482SendCommandData(DS2482_CMD_SET_READ_PTR, 0xE1);
 80006d0:	21e1      	movs	r1, #225	; 0xe1
 80006d2:	20e1      	movs	r0, #225	; 0xe1
 80006d4:	f7ff ff84 	bl	80005e0 <DS2482SendCommandData>
	HAL_I2C_Master_Receive(&hi2c1, READ_ADDRESS, data, 1, HAL_MAX_DELAY);
 80006d8:	463a      	mov	r2, r7
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	2131      	movs	r1, #49	; 0x31
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <OWReadByte+0x58>)
 80006e6:	f002 f8fd 	bl	80028e4 <HAL_I2C_Master_Receive>

	return data[0];
 80006ea:	783b      	ldrb	r3, [r7, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000f4 	.word	0x200000f4

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	4b4a      	ldr	r3, [pc, #296]	; (8000838 <MX_GPIO_Init+0x140>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a49      	ldr	r2, [pc, #292]	; (8000838 <MX_GPIO_Init+0x140>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b47      	ldr	r3, [pc, #284]	; (8000838 <MX_GPIO_Init+0x140>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b44      	ldr	r3, [pc, #272]	; (8000838 <MX_GPIO_Init+0x140>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a43      	ldr	r2, [pc, #268]	; (8000838 <MX_GPIO_Init+0x140>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <MX_GPIO_Init+0x140>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <MX_GPIO_Init+0x140>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a3d      	ldr	r2, [pc, #244]	; (8000838 <MX_GPIO_Init+0x140>)
 8000742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <MX_GPIO_Init+0x140>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	4b38      	ldr	r3, [pc, #224]	; (8000838 <MX_GPIO_Init+0x140>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a37      	ldr	r2, [pc, #220]	; (8000838 <MX_GPIO_Init+0x140>)
 800075a:	f043 0320 	orr.w	r3, r3, #32
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b35      	ldr	r3, [pc, #212]	; (8000838 <MX_GPIO_Init+0x140>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0320 	and.w	r3, r3, #32
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <MX_GPIO_Init+0x140>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a31      	ldr	r2, [pc, #196]	; (8000838 <MX_GPIO_Init+0x140>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_GPIO_Init+0x140>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800078a:	482c      	ldr	r0, [pc, #176]	; (800083c <MX_GPIO_Init+0x144>)
 800078c:	f001 fe5b 	bl	8002446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E_Pin|RS_Pin|D4_Pin|D5_Pin
 8000790:	2200      	movs	r2, #0
 8000792:	21fc      	movs	r1, #252	; 0xfc
 8000794:	482a      	ldr	r0, [pc, #168]	; (8000840 <MX_GPIO_Init+0x148>)
 8000796:	f001 fe56 	bl	8002446 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80007a0:	4828      	ldr	r0, [pc, #160]	; (8000844 <MX_GPIO_Init+0x14c>)
 80007a2:	f001 fe50 	bl	8002446 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007ac:	2311      	movs	r3, #17
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2302      	movs	r3, #2
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	4619      	mov	r1, r3
 80007be:	481f      	ldr	r0, [pc, #124]	; (800083c <MX_GPIO_Init+0x144>)
 80007c0:	f001 fcd0 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = E_Pin|RS_Pin|D4_Pin|D5_Pin
 80007c4:	23fc      	movs	r3, #252	; 0xfc
 80007c6:	61bb      	str	r3, [r7, #24]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2302      	movs	r3, #2
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	4619      	mov	r1, r3
 80007da:	4819      	ldr	r0, [pc, #100]	; (8000840 <MX_GPIO_Init+0x148>)
 80007dc:	f001 fcc2 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007e0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007e4:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2302      	movs	r3, #2
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	4619      	mov	r1, r3
 80007f8:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0x14c>)
 80007fa:	f001 fcb3 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007fe:	23ff      	movs	r3, #255	; 0xff
 8000800:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	4619      	mov	r1, r3
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_GPIO_Init+0x150>)
 8000812:	f001 fca7 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000816:	2303      	movs	r3, #3
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	4619      	mov	r1, r3
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_GPIO_Init+0x14c>)
 800082a:	f001 fc9b 	bl	8002164 <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	40011000 	.word	0x40011000
 8000840:	40010800 	.word	0x40010800
 8000844:	40011800 	.word	0x40011800
 8000848:	40011400 	.word	0x40011400

0800084c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_I2C1_Init+0x50>)
 800088a:	f001 fdf5 	bl	8002478 <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000894:	f001 fa18 	bl	8001cc8 <Error_Handler>
  }

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000f4 	.word	0x200000f4
 80008a0:	40005400 	.word	0x40005400
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a15      	ldr	r2, [pc, #84]	; (8000918 <HAL_I2C_MspInit+0x70>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d123      	bne.n	8000910 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_I2C_MspInit+0x74>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <HAL_I2C_MspInit+0x74>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_I2C_MspInit+0x74>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008e0:	23c0      	movs	r3, #192	; 0xc0
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e4:	2312      	movs	r3, #18
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <HAL_I2C_MspInit+0x78>)
 80008f4:	f001 fc36 	bl	8002164 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_I2C_MspInit+0x74>)
 80008fa:	69db      	ldr	r3, [r3, #28]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_I2C_MspInit+0x74>)
 80008fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000902:	61d3      	str	r3, [r2, #28]
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_I2C_MspInit+0x74>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40005400 	.word	0x40005400
 800091c:	40021000 	.word	0x40021000
 8000920:	40010c00 	.word	0x40010c00

08000924 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000932:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000936:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800093a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800093e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000942:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000944:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000946:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f80e 	bl	800097a <Lcd_init>

	return lcd;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	461d      	mov	r5, r3
 8000962:	f107 0410 	add.w	r4, r7, #16
 8000966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800096a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800096e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}

0800097a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7d9b      	ldrb	r3, [r3, #22]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d10c      	bne.n	80009a4 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800098a:	2133      	movs	r1, #51	; 0x33
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f861 	bl	8000a54 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000992:	2132      	movs	r1, #50	; 0x32
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f85d 	bl	8000a54 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800099a:	2128      	movs	r1, #40	; 0x28
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f859 	bl	8000a54 <lcd_write_command>
 80009a2:	e003      	b.n	80009ac <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80009a4:	2138      	movs	r1, #56	; 0x38
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 f854 	bl	8000a54 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80009ac:	2101      	movs	r1, #1
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f850 	bl	8000a54 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80009b4:	210c      	movs	r1, #12
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f84c 	bl	8000a54 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80009bc:	2106      	movs	r1, #6
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f848 	bl	8000a54 <lcd_write_command>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e00a      	b.n	80009f2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f862 	bl	8000ab0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	3301      	adds	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	7bfc      	ldrb	r4, [r7, #15]
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f7ff fc15 	bl	8000224 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	429c      	cmp	r4, r3
 80009fe:	d3ed      	bcc.n	80009dc <Lcd_string+0x10>
	}
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}

08000a08 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
 8000a14:	4613      	mov	r3, r2
 8000a16:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <Lcd_cursor+0x30>)
 8000a1c:	5cd2      	ldrb	r2, [r2, r3]
 8000a1e:	78bb      	ldrb	r3, [r7, #2]
 8000a20:	4413      	add	r3, r2
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	3b80      	subs	r3, #128	; 0x80
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f812 	bl	8000a54 <lcd_write_command>
	#endif
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	08004ac4 	.word	0x08004ac4

08000a3c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000a44:	2101      	movs	r1, #1
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f804 	bl	8000a54 <lcd_write_command>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6898      	ldr	r0, [r3, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	899b      	ldrh	r3, [r3, #12]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f001 fceb 	bl	8002446 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7d9b      	ldrb	r3, [r3, #22]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d111      	bne.n	8000a9c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2204      	movs	r2, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f842 	bl	8000b0c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2204      	movs	r2, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f839 	bl	8000b0c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000a9a:	e005      	b.n	8000aa8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f832 	bl	8000b0c <lcd_write>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6898      	ldr	r0, [r3, #8]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	899b      	ldrh	r3, [r3, #12]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f001 fcbd 	bl	8002446 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7d9b      	ldrb	r3, [r3, #22]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d111      	bne.n	8000af8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2204      	movs	r2, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f814 	bl	8000b0c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2204      	movs	r2, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f80b 	bl	8000b0c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000af6:	e005      	b.n	8000b04 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2208      	movs	r2, #8
 8000afc:	4619      	mov	r1, r3
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 f804 	bl	8000b0c <lcd_write>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	e019      	b.n	8000b56 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	8819      	ldrh	r1, [r3, #0]
 8000b3a:	78fa      	ldrb	r2, [r7, #3]
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	fa42 f303 	asr.w	r3, r2, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f001 fc7b 	bl	8002446 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	3301      	adds	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	7bfa      	ldrb	r2, [r7, #15]
 8000b58:	78bb      	ldrb	r3, [r7, #2]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3e1      	bcc.n	8000b22 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6918      	ldr	r0, [r3, #16]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	8a9b      	ldrh	r3, [r3, #20]
 8000b66:	2201      	movs	r2, #1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f001 fc6c 	bl	8002446 <HAL_GPIO_WritePin>
	DELAY(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f001 f9f2 	bl	8001f58 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6918      	ldr	r0, [r3, #16]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	8a9b      	ldrh	r3, [r3, #20]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f001 fc61 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <REL_1>:

#include "macro.h"
#include "gpio.h"

void REL_1(int x)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(x == 1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d105      	bne.n	8000ba6 <REL_1+0x1a>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <REL_1+0x34>)
 8000ba2:	f001 fc50 	bl	8002446 <HAL_GPIO_WritePin>
	if(x == 0)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <REL_1+0x2c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <REL_1+0x34>)
 8000bb4:	f001 fc47 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40011800 	.word	0x40011800

08000bc4 <REL_2>:

void REL_2(int x)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	if(x == 1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d105      	bne.n	8000bde <REL_2+0x1a>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <REL_2+0x34>)
 8000bda:	f001 fc34 	bl	8002446 <HAL_GPIO_WritePin>
	if(x == 0)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d105      	bne.n	8000bf0 <REL_2+0x2c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <REL_2+0x34>)
 8000bec:	f001 fc2b 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40011800 	.word	0x40011800

08000bfc <REL_3>:

void REL_3(int x)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	if(x == 1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d105      	bne.n	8000c16 <REL_3+0x1a>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <REL_3+0x34>)
 8000c12:	f001 fc18 	bl	8002446 <HAL_GPIO_WritePin>
	if(x == 0)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d105      	bne.n	8000c28 <REL_3+0x2c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c22:	4803      	ldr	r0, [pc, #12]	; (8000c30 <REL_3+0x34>)
 8000c24:	f001 fc0f 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40011800 	.word	0x40011800

08000c34 <REL_4>:

void REL_4(int x)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	if(x == 1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <REL_4+0x1a>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c48:	4807      	ldr	r0, [pc, #28]	; (8000c68 <REL_4+0x34>)
 8000c4a:	f001 fbfc 	bl	8002446 <HAL_GPIO_WritePin>
	if(x == 0)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d105      	bne.n	8000c60 <REL_4+0x2c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <REL_4+0x34>)
 8000c5c:	f001 fbf3 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40011800 	.word	0x40011800

08000c6c <REL_5>:

void REL_5(int x)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	if(x == 1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d105      	bne.n	8000c86 <REL_5+0x1a>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <REL_5+0x34>)
 8000c82:	f001 fbe0 	bl	8002446 <HAL_GPIO_WritePin>
	if(x == 0)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d105      	bne.n	8000c98 <REL_5+0x2c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <REL_5+0x34>)
 8000c94:	f001 fbd7 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40011800 	.word	0x40011800

08000ca4 <REL_6>:

void REL_6(int x)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	if(x == 1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d105      	bne.n	8000cbe <REL_6+0x1a>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <REL_6+0x34>)
 8000cba:	f001 fbc4 	bl	8002446 <HAL_GPIO_WritePin>
	if(x == 0)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d105      	bne.n	8000cd0 <REL_6+0x2c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cca:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <REL_6+0x34>)
 8000ccc:	f001 fbbb 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40011800 	.word	0x40011800

08000cdc <REL_7>:

void REL_7(int x)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if(x == 1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d105      	bne.n	8000cf6 <REL_7+0x1a>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <REL_7+0x34>)
 8000cf2:	f001 fba8 	bl	8002446 <HAL_GPIO_WritePin>
	if(x == 0)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <REL_7+0x2c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <REL_7+0x34>)
 8000d04:	f001 fb9f 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40011800 	.word	0x40011800

08000d14 <REL_8>:

void REL_8(int x)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if(x == 1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d105      	bne.n	8000d2e <REL_8+0x1a>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	4807      	ldr	r0, [pc, #28]	; (8000d48 <REL_8+0x34>)
 8000d2a:	f001 fb8c 	bl	8002446 <HAL_GPIO_WritePin>
	if(x == 0)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d105      	bne.n	8000d40 <REL_8+0x2c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <REL_8+0x34>)
 8000d3c:	f001 fb83 	bl	8002446 <HAL_GPIO_WritePin>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40011800 	.word	0x40011800

08000d4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b092      	sub	sp, #72	; 0x48
 8000d50:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d52:	f001 f89f 	bl	8001e94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d56:	f000 fab9 	bl	80012cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d5a:	f7ff fccd 	bl	80006f8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000d5e:	f7ff fd75 	bl	800084c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000d62:	2064      	movs	r0, #100	; 0x64
 8000d64:	f001 f8f8 	bl	8001f58 <HAL_Delay>
	Lcd_PortType ports[] = {
 8000d68:	4bb4      	ldr	r3, [pc, #720]	; (800103c <main+0x2f0>)
 8000d6a:	f107 0420 	add.w	r4, r7, #32
 8000d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
	};

	Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000d74:	4ab2      	ldr	r2, [pc, #712]	; (8001040 <main+0x2f4>)
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d7e:	e883 0003 	stmia.w	r3, {r0, r1}



	lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, E_GPIO_Port, E_Pin, LCD_4_BIT_MODE);
 8000d82:	4cb0      	ldr	r4, [pc, #704]	; (8001044 <main+0x2f8>)
 8000d84:	4638      	mov	r0, r7
 8000d86:	f107 0218 	add.w	r2, r7, #24
 8000d8a:	f107 0120 	add.w	r1, r7, #32
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9303      	str	r3, [sp, #12]
 8000d92:	2304      	movs	r3, #4
 8000d94:	9302      	str	r3, [sp, #8]
 8000d96:	4bac      	ldr	r3, [pc, #688]	; (8001048 <main+0x2fc>)
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	4baa      	ldr	r3, [pc, #680]	; (8001048 <main+0x2fc>)
 8000da0:	f7ff fdc0 	bl	8000924 <Lcd_create>
 8000da4:	4625      	mov	r5, r4
 8000da6:	463c      	mov	r4, r7
 8000da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000db0:	e885 0003 	stmia.w	r5, {r0, r1}

	Lcd_cursor(&lcd, 0,3);
 8000db4:	2203      	movs	r2, #3
 8000db6:	2100      	movs	r1, #0
 8000db8:	48a2      	ldr	r0, [pc, #648]	; (8001044 <main+0x2f8>)
 8000dba:	f7ff fe25 	bl	8000a08 <Lcd_cursor>
	Lcd_string(&lcd, "TENDO 4/8");
 8000dbe:	49a3      	ldr	r1, [pc, #652]	; (800104c <main+0x300>)
 8000dc0:	48a0      	ldr	r0, [pc, #640]	; (8001044 <main+0x2f8>)
 8000dc2:	f7ff fe03 	bl	80009cc <Lcd_string>
	Lcd_cursor(&lcd, 1,0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2101      	movs	r1, #1
 8000dca:	489e      	ldr	r0, [pc, #632]	; (8001044 <main+0x2f8>)
 8000dcc:	f7ff fe1c 	bl	8000a08 <Lcd_cursor>
	Lcd_string(&lcd, "ONE WIRE READER");
 8000dd0:	499f      	ldr	r1, [pc, #636]	; (8001050 <main+0x304>)
 8000dd2:	489c      	ldr	r0, [pc, #624]	; (8001044 <main+0x2f8>)
 8000dd4:	f7ff fdfa 	bl	80009cc <Lcd_string>


	Lcd_clear(&lcd);
 8000dd8:	489a      	ldr	r0, [pc, #616]	; (8001044 <main+0x2f8>)
 8000dda:	f7ff fe2f 	bl	8000a3c <Lcd_clear>

	DS2842Reset();
 8000dde:	f7ff fbab 	bl	8000538 <DS2842Reset>
	DS2842Configuration();
 8000de2:	f7ff fbc7 	bl	8000574 <DS2842Configuration>

	ErrorLed(OFF);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 fab2 	bl	8001350 <ErrorLed>
	BusyLed(OFF);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 facb 	bl	8001388 <BusyLed>
	ReadLed(OFF);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 fae4 	bl	80013c0 <ReadLed>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		switch (key) {
 8000df8:	4b96      	ldr	r3, [pc, #600]	; (8001054 <main+0x308>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b13      	cmp	r3, #19
 8000dfe:	d8fb      	bhi.n	8000df8 <main+0xac>
 8000e00:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <main+0xbc>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000e59 	.word	0x08000e59
 8000e0c:	08000e9f 	.word	0x08000e9f
 8000e10:	08000ead 	.word	0x08000ead
 8000e14:	08000eb9 	.word	0x08000eb9
 8000e18:	08000ec7 	.word	0x08000ec7
 8000e1c:	08000ed3 	.word	0x08000ed3
 8000e20:	08000ee1 	.word	0x08000ee1
 8000e24:	08000f6d 	.word	0x08000f6d
 8000e28:	08000f7f 	.word	0x08000f7f
 8000e2c:	0800102f 	.word	0x0800102f
 8000e30:	08001079 	.word	0x08001079
 8000e34:	080010fd 	.word	0x080010fd
 8000e38:	0800110b 	.word	0x0800110b
 8000e3c:	0800115f 	.word	0x0800115f
 8000e40:	08001183 	.word	0x08001183
 8000e44:	08001191 	.word	0x08001191
 8000e48:	0800121b 	.word	0x0800121b
 8000e4c:	08001229 	.word	0x08001229
 8000e50:	08001239 	.word	0x08001239
 8000e54:	0800126b 	.word	0x0800126b
		case 0:

			Lcd_cursor(&lcd, 0,0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4879      	ldr	r0, [pc, #484]	; (8001044 <main+0x2f8>)
 8000e5e:	f7ff fdd3 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "SELECT CHANNELS");
 8000e62:	497d      	ldr	r1, [pc, #500]	; (8001058 <main+0x30c>)
 8000e64:	4877      	ldr	r0, [pc, #476]	; (8001044 <main+0x2f8>)
 8000e66:	f7ff fdb1 	bl	80009cc <Lcd_string>
			SelectChannels();
 8000e6a:	f000 fac5 	bl	80013f8 <SelectChannels>
			DrawSelectChannel();
 8000e6e:	f000 fb3b 	bl	80014e8 <DrawSelectChannel>
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0) //read
 8000e72:	2101      	movs	r1, #1
 8000e74:	4879      	ldr	r0, [pc, #484]	; (800105c <main+0x310>)
 8000e76:	f001 facf 	bl	8002418 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <main+0x13a>
			{
				key = 1;
 8000e80:	4b74      	ldr	r3, [pc, #464]	; (8001054 <main+0x308>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0) //write
 8000e86:	2102      	movs	r1, #2
 8000e88:	4874      	ldr	r0, [pc, #464]	; (800105c <main+0x310>)
 8000e8a:	f001 fac5 	bl	8002418 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f040 81f8 	bne.w	8001286 <main+0x53a>
			{
				key = 9;
 8000e96:	4b6f      	ldr	r3, [pc, #444]	; (8001054 <main+0x308>)
 8000e98:	2209      	movs	r2, #9
 8000e9a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000e9c:	e1f3      	b.n	8001286 <main+0x53a>

		case 1:
			Lcd_clear(&lcd);
 8000e9e:	4869      	ldr	r0, [pc, #420]	; (8001044 <main+0x2f8>)
 8000ea0:	f7ff fdcc 	bl	8000a3c <Lcd_clear>
			key = 2;
 8000ea4:	4b6b      	ldr	r3, [pc, #428]	; (8001054 <main+0x308>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
			break;
 8000eaa:	e1f1      	b.n	8001290 <main+0x544>

		case 2:
			DrawAnimation();
 8000eac:	f000 fbee 	bl	800168c <DrawAnimation>
			key = 5;
 8000eb0:	4b68      	ldr	r3, [pc, #416]	; (8001054 <main+0x308>)
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	701a      	strb	r2, [r3, #0]
			break;
 8000eb6:	e1eb      	b.n	8001290 <main+0x544>

		case 3:
			Lcd_clear(&lcd);
 8000eb8:	4862      	ldr	r0, [pc, #392]	; (8001044 <main+0x2f8>)
 8000eba:	f7ff fdbf 	bl	8000a3c <Lcd_clear>
			key = 4;
 8000ebe:	4b65      	ldr	r3, [pc, #404]	; (8001054 <main+0x308>)
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	701a      	strb	r2, [r3, #0]
			break;
 8000ec4:	e1e4      	b.n	8001290 <main+0x544>

		case 4:
			DrawAnimation();
 8000ec6:	f000 fbe1 	bl	800168c <DrawAnimation>
			key = 7;
 8000eca:	4b62      	ldr	r3, [pc, #392]	; (8001054 <main+0x308>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	701a      	strb	r2, [r3, #0]
			break;
 8000ed0:	e1de      	b.n	8001290 <main+0x544>

		case 5:
			Lcd_clear(&lcd);
 8000ed2:	485c      	ldr	r0, [pc, #368]	; (8001044 <main+0x2f8>)
 8000ed4:	f7ff fdb2 	bl	8000a3c <Lcd_clear>
			key = 6;
 8000ed8:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <main+0x308>)
 8000eda:	2206      	movs	r2, #6
 8000edc:	701a      	strb	r2, [r3, #0]
			break;
 8000ede:	e1d7      	b.n	8001290 <main+0x544>

		case 6:
			Lcd_cursor(&lcd, 0,0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4857      	ldr	r0, [pc, #348]	; (8001044 <main+0x2f8>)
 8000ee6:	f7ff fd8f 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "Press READ to");
 8000eea:	495d      	ldr	r1, [pc, #372]	; (8001060 <main+0x314>)
 8000eec:	4855      	ldr	r0, [pc, #340]	; (8001044 <main+0x2f8>)
 8000eee:	f7ff fd6d 	bl	80009cc <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4853      	ldr	r0, [pc, #332]	; (8001044 <main+0x2f8>)
 8000ef8:	f7ff fd86 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "continue");
 8000efc:	4959      	ldr	r1, [pc, #356]	; (8001064 <main+0x318>)
 8000efe:	4851      	ldr	r0, [pc, #324]	; (8001044 <main+0x2f8>)
 8000f00:	f7ff fd64 	bl	80009cc <Lcd_string>
			for(;;)
			{
				Lcd_cursor(&lcd, 1,15);
 8000f04:	220f      	movs	r2, #15
 8000f06:	2101      	movs	r1, #1
 8000f08:	484e      	ldr	r0, [pc, #312]	; (8001044 <main+0x2f8>)
 8000f0a:	f7ff fd7d 	bl	8000a08 <Lcd_cursor>
				Lcd_string(&lcd, ">");
 8000f0e:	4956      	ldr	r1, [pc, #344]	; (8001068 <main+0x31c>)
 8000f10:	484c      	ldr	r0, [pc, #304]	; (8001044 <main+0x2f8>)
 8000f12:	f7ff fd5b 	bl	80009cc <Lcd_string>
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0) //read
 8000f16:	2101      	movs	r1, #1
 8000f18:	4850      	ldr	r0, [pc, #320]	; (800105c <main+0x310>)
 8000f1a:	f001 fa7d 	bl	8002418 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d105      	bne.n	8000f30 <main+0x1e4>
				{
					ReadOWDevice();
 8000f24:	f000 fd4c 	bl	80019c0 <ReadOWDevice>
					key = 7;
 8000f28:	4b4a      	ldr	r3, [pc, #296]	; (8001054 <main+0x308>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	701a      	strb	r2, [r3, #0]
					break;
 8000f2e:	e01c      	b.n	8000f6a <main+0x21e>
				}
				HAL_Delay(150);
 8000f30:	2096      	movs	r0, #150	; 0x96
 8000f32:	f001 f811 	bl	8001f58 <HAL_Delay>
				Lcd_cursor(&lcd, 1,15);
 8000f36:	220f      	movs	r2, #15
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4842      	ldr	r0, [pc, #264]	; (8001044 <main+0x2f8>)
 8000f3c:	f7ff fd64 	bl	8000a08 <Lcd_cursor>
				Lcd_string(&lcd, " ");
 8000f40:	494a      	ldr	r1, [pc, #296]	; (800106c <main+0x320>)
 8000f42:	4840      	ldr	r0, [pc, #256]	; (8001044 <main+0x2f8>)
 8000f44:	f7ff fd42 	bl	80009cc <Lcd_string>
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0) //read
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4844      	ldr	r0, [pc, #272]	; (800105c <main+0x310>)
 8000f4c:	f001 fa64 	bl	8002418 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d105      	bne.n	8000f62 <main+0x216>
				{
					ReadOWDevice();
 8000f56:	f000 fd33 	bl	80019c0 <ReadOWDevice>
					key = 7;
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <main+0x308>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	701a      	strb	r2, [r3, #0]
					break;
 8000f60:	e003      	b.n	8000f6a <main+0x21e>
				}
				HAL_Delay(150);
 8000f62:	2096      	movs	r0, #150	; 0x96
 8000f64:	f000 fff8 	bl	8001f58 <HAL_Delay>
				Lcd_cursor(&lcd, 1,15);
 8000f68:	e7cc      	b.n	8000f04 <main+0x1b8>
			}

			break;
 8000f6a:	e191      	b.n	8001290 <main+0x544>

		case 7:
			AddressMenu(menuposstart);
 8000f6c:	4b40      	ldr	r3, [pc, #256]	; (8001070 <main+0x324>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fd75 	bl	8001a60 <AddressMenu>
			key = 8;
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <main+0x308>)
 8000f78:	2208      	movs	r2, #8
 8000f7a:	701a      	strb	r2, [r3, #0]
			break;
 8000f7c:	e188      	b.n	8001290 <main+0x544>

		case 8:

			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0) //<R
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4836      	ldr	r0, [pc, #216]	; (800105c <main+0x310>)
 8000f82:	f001 fa49 	bl	8002418 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10f      	bne.n	8000fac <main+0x260>
			{
				if(menuposstart != 0)
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <main+0x324>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00b      	beq.n	8000fac <main+0x260>
				{
					HAL_Delay(150);
 8000f94:	2096      	movs	r0, #150	; 0x96
 8000f96:	f000 ffdf 	bl	8001f58 <HAL_Delay>
					menuposstart = menuposstart - 1;
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <main+0x324>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <main+0x324>)
 8000fa4:	701a      	strb	r2, [r3, #0]
					key = 7;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <main+0x308>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	701a      	strb	r2, [r3, #0]
				}
			}

			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0) //W>
 8000fac:	2102      	movs	r1, #2
 8000fae:	482b      	ldr	r0, [pc, #172]	; (800105c <main+0x310>)
 8000fb0:	f001 fa32 	bl	8002418 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 8167 	bne.w	800128a <main+0x53e>
			{
				if(menuposstart != 9)
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <main+0x324>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d00b      	beq.n	8000fdc <main+0x290>
				{
					HAL_Delay(150);
 8000fc4:	2096      	movs	r0, #150	; 0x96
 8000fc6:	f000 ffc7 	bl	8001f58 <HAL_Delay>
					menuposstart = menuposstart + 1;
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <main+0x324>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <main+0x324>)
 8000fd4:	701a      	strb	r2, [r3, #0]
					key = 7;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <main+0x308>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	701a      	strb	r2, [r3, #0]
				}
				if(menuposstart == 9)
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <main+0x324>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	f040 8152 	bne.w	800128a <main+0x53e>
				{
					menuposstart = 0;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <main+0x324>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
					Lcd_clear(&lcd);
 8000fec:	4815      	ldr	r0, [pc, #84]	; (8001044 <main+0x2f8>)
 8000fee:	f7ff fd25 	bl	8000a3c <Lcd_clear>
					for(int k = 0; k<8; k++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ff6:	e013      	b.n	8001020 <main+0x2d4>
					{
						for(int m = 0; m<8; m++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8000ffc:	e00a      	b.n	8001014 <main+0x2c8>
						{
							sensor[k][m] = 0;
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <main+0x328>)
 8001000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	441a      	add	r2, r3
 8001006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001008:	4413      	add	r3, r2
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
						for(int m = 0; m<8; m++)
 800100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001010:	3301      	adds	r3, #1
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
 8001014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001016:	2b07      	cmp	r3, #7
 8001018:	ddf1      	ble.n	8000ffe <main+0x2b2>
					for(int k = 0; k<8; k++)
 800101a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101c:	3301      	adds	r3, #1
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
 8001020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001022:	2b07      	cmp	r3, #7
 8001024:	dde8      	ble.n	8000ff8 <main+0x2ac>
						}
					}
					key = 0;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <main+0x308>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 800102c:	e12d      	b.n	800128a <main+0x53e>
			//-----------------------------------------------------WRITE TO MEMORY--------------------------------------------//
		case 9:
			Lcd_clear(&lcd);
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <main+0x2f8>)
 8001030:	f7ff fd04 	bl	8000a3c <Lcd_clear>
			key = 10;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <main+0x308>)
 8001036:	220a      	movs	r2, #10
 8001038:	701a      	strb	r2, [r3, #0]
			break;
 800103a:	e129      	b.n	8001290 <main+0x544>
 800103c:	080049f4 	.word	0x080049f4
 8001040:	08004a04 	.word	0x08004a04
 8001044:	200000dc 	.word	0x200000dc
 8001048:	40010800 	.word	0x40010800
 800104c:	0800492c 	.word	0x0800492c
 8001050:	08004938 	.word	0x08004938
 8001054:	200000cc 	.word	0x200000cc
 8001058:	08004948 	.word	0x08004948
 800105c:	40011800 	.word	0x40011800
 8001060:	08004958 	.word	0x08004958
 8001064:	08004968 	.word	0x08004968
 8001068:	08004974 	.word	0x08004974
 800106c:	08004978 	.word	0x08004978
 8001070:	200000cd 	.word	0x200000cd
 8001074:	2000008c 	.word	0x2000008c

		case 10:
			Lcd_cursor(&lcd, 0,0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	4885      	ldr	r0, [pc, #532]	; (8001294 <main+0x548>)
 800107e:	f7ff fcc3 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "Insert IC memory ");
 8001082:	4985      	ldr	r1, [pc, #532]	; (8001298 <main+0x54c>)
 8001084:	4883      	ldr	r0, [pc, #524]	; (8001294 <main+0x548>)
 8001086:	f7ff fca1 	bl	80009cc <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 800108a:	2200      	movs	r2, #0
 800108c:	2101      	movs	r1, #1
 800108e:	4881      	ldr	r0, [pc, #516]	; (8001294 <main+0x548>)
 8001090:	f7ff fcba 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "and press WRITE");
 8001094:	4981      	ldr	r1, [pc, #516]	; (800129c <main+0x550>)
 8001096:	487f      	ldr	r0, [pc, #508]	; (8001294 <main+0x548>)
 8001098:	f7ff fc98 	bl	80009cc <Lcd_string>
			for(;;)
			{
				Lcd_cursor(&lcd, 1,15);
 800109c:	220f      	movs	r2, #15
 800109e:	2101      	movs	r1, #1
 80010a0:	487c      	ldr	r0, [pc, #496]	; (8001294 <main+0x548>)
 80010a2:	f7ff fcb1 	bl	8000a08 <Lcd_cursor>
				Lcd_string(&lcd, ">");
 80010a6:	497e      	ldr	r1, [pc, #504]	; (80012a0 <main+0x554>)
 80010a8:	487a      	ldr	r0, [pc, #488]	; (8001294 <main+0x548>)
 80010aa:	f7ff fc8f 	bl	80009cc <Lcd_string>
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0) //write
 80010ae:	2102      	movs	r1, #2
 80010b0:	487c      	ldr	r0, [pc, #496]	; (80012a4 <main+0x558>)
 80010b2:	f001 f9b1 	bl	8002418 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d103      	bne.n	80010c4 <main+0x378>
				{
					key = 11;
 80010bc:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <main+0x55c>)
 80010be:	220b      	movs	r2, #11
 80010c0:	701a      	strb	r2, [r3, #0]
					break;
 80010c2:	e01a      	b.n	80010fa <main+0x3ae>
				}
				HAL_Delay(150);
 80010c4:	2096      	movs	r0, #150	; 0x96
 80010c6:	f000 ff47 	bl	8001f58 <HAL_Delay>
				Lcd_cursor(&lcd, 1,15);
 80010ca:	220f      	movs	r2, #15
 80010cc:	2101      	movs	r1, #1
 80010ce:	4871      	ldr	r0, [pc, #452]	; (8001294 <main+0x548>)
 80010d0:	f7ff fc9a 	bl	8000a08 <Lcd_cursor>
				Lcd_string(&lcd, " ");
 80010d4:	4975      	ldr	r1, [pc, #468]	; (80012ac <main+0x560>)
 80010d6:	486f      	ldr	r0, [pc, #444]	; (8001294 <main+0x548>)
 80010d8:	f7ff fc78 	bl	80009cc <Lcd_string>
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0) //write
 80010dc:	2102      	movs	r1, #2
 80010de:	4871      	ldr	r0, [pc, #452]	; (80012a4 <main+0x558>)
 80010e0:	f001 f99a 	bl	8002418 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d103      	bne.n	80010f2 <main+0x3a6>
				{
					key = 11;
 80010ea:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <main+0x55c>)
 80010ec:	220b      	movs	r2, #11
 80010ee:	701a      	strb	r2, [r3, #0]
					break;
 80010f0:	e003      	b.n	80010fa <main+0x3ae>
				}
				HAL_Delay(150);
 80010f2:	2096      	movs	r0, #150	; 0x96
 80010f4:	f000 ff30 	bl	8001f58 <HAL_Delay>
				Lcd_cursor(&lcd, 1,15);
 80010f8:	e7d0      	b.n	800109c <main+0x350>
			}
			break;
 80010fa:	e0c9      	b.n	8001290 <main+0x544>

		case 11:
			Lcd_clear(&lcd);
 80010fc:	4865      	ldr	r0, [pc, #404]	; (8001294 <main+0x548>)
 80010fe:	f7ff fc9d 	bl	8000a3c <Lcd_clear>
			key = 12;
 8001102:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <main+0x55c>)
 8001104:	220c      	movs	r2, #12
 8001106:	701a      	strb	r2, [r3, #0]
			break;
 8001108:	e0c2      	b.n	8001290 <main+0x544>

		case 12:

			if(HAL_I2C_IsDeviceReady(&hi2c1, 0xA0, 1, HAL_MAX_DELAY) != HAL_OK)
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	2201      	movs	r2, #1
 8001110:	21a0      	movs	r1, #160	; 0xa0
 8001112:	4867      	ldr	r0, [pc, #412]	; (80012b0 <main+0x564>)
 8001114:	f001 fe40 	bl	8002d98 <HAL_I2C_IsDeviceReady>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d018      	beq.n	8001150 <main+0x404>
			{
				ErrorLed(ON);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 f916 	bl	8001350 <ErrorLed>
				Lcd_cursor(&lcd, 0,0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	485a      	ldr	r0, [pc, #360]	; (8001294 <main+0x548>)
 800112a:	f7ff fc6d 	bl	8000a08 <Lcd_cursor>
				Lcd_string(&lcd, "NO MEMORY IC");
 800112e:	4961      	ldr	r1, [pc, #388]	; (80012b4 <main+0x568>)
 8001130:	4858      	ldr	r0, [pc, #352]	; (8001294 <main+0x548>)
 8001132:	f7ff fc4b 	bl	80009cc <Lcd_string>
				Lcd_cursor(&lcd, 1,0);
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	4856      	ldr	r0, [pc, #344]	; (8001294 <main+0x548>)
 800113c:	f7ff fc64 	bl	8000a08 <Lcd_cursor>
				Lcd_string(&lcd, "Check slot");
 8001140:	495d      	ldr	r1, [pc, #372]	; (80012b8 <main+0x56c>)
 8001142:	4854      	ldr	r0, [pc, #336]	; (8001294 <main+0x548>)
 8001144:	f7ff fc42 	bl	80009cc <Lcd_string>
				key = 13;
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <main+0x55c>)
 800114a:	220d      	movs	r2, #13
 800114c:	701a      	strb	r2, [r3, #0]
			else
			{
				ErrorLed(OFF);
				key = 15;
			}
			break;
 800114e:	e09f      	b.n	8001290 <main+0x544>
				ErrorLed(OFF);
 8001150:	2000      	movs	r0, #0
 8001152:	f000 f8fd 	bl	8001350 <ErrorLed>
				key = 15;
 8001156:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <main+0x55c>)
 8001158:	220f      	movs	r2, #15
 800115a:	701a      	strb	r2, [r3, #0]
			break;
 800115c:	e098      	b.n	8001290 <main+0x544>

		case 13:

			if(HAL_I2C_IsDeviceReady(&hi2c1, 0xA0, 1, HAL_MAX_DELAY) != HAL_OK)
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	21a0      	movs	r1, #160	; 0xa0
 8001166:	4852      	ldr	r0, [pc, #328]	; (80012b0 <main+0x564>)
 8001168:	f001 fe16 	bl	8002d98 <HAL_I2C_IsDeviceReady>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <main+0x42e>
			{
				key = 12;
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <main+0x55c>)
 8001174:	220c      	movs	r2, #12
 8001176:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				key = 14;
			}
			break;
 8001178:	e08a      	b.n	8001290 <main+0x544>
				key = 14;
 800117a:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <main+0x55c>)
 800117c:	220e      	movs	r2, #14
 800117e:	701a      	strb	r2, [r3, #0]
			break;
 8001180:	e086      	b.n	8001290 <main+0x544>

		case 14:
			Lcd_clear(&lcd);
 8001182:	4844      	ldr	r0, [pc, #272]	; (8001294 <main+0x548>)
 8001184:	f7ff fc5a 	bl	8000a3c <Lcd_clear>
			key = 15;
 8001188:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <main+0x55c>)
 800118a:	220f      	movs	r2, #15
 800118c:	701a      	strb	r2, [r3, #0]
			break;
 800118e:	e07f      	b.n	8001290 <main+0x544>

		case 15:
			ErrorLed(OFF);
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f8dd 	bl	8001350 <ErrorLed>
			Lcd_cursor(&lcd, 0,0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	483e      	ldr	r0, [pc, #248]	; (8001294 <main+0x548>)
 800119c:	f7ff fc34 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "OK");
 80011a0:	4946      	ldr	r1, [pc, #280]	; (80012bc <main+0x570>)
 80011a2:	483c      	ldr	r0, [pc, #240]	; (8001294 <main+0x548>)
 80011a4:	f7ff fc12 	bl	80009cc <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2101      	movs	r1, #1
 80011ac:	4839      	ldr	r0, [pc, #228]	; (8001294 <main+0x548>)
 80011ae:	f7ff fc2b 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "Press WRITE");
 80011b2:	4943      	ldr	r1, [pc, #268]	; (80012c0 <main+0x574>)
 80011b4:	4837      	ldr	r0, [pc, #220]	; (8001294 <main+0x548>)
 80011b6:	f7ff fc09 	bl	80009cc <Lcd_string>
			for(;;)
			{
				Lcd_cursor(&lcd, 1,15);
 80011ba:	220f      	movs	r2, #15
 80011bc:	2101      	movs	r1, #1
 80011be:	4835      	ldr	r0, [pc, #212]	; (8001294 <main+0x548>)
 80011c0:	f7ff fc22 	bl	8000a08 <Lcd_cursor>
				Lcd_string(&lcd, ">");
 80011c4:	4936      	ldr	r1, [pc, #216]	; (80012a0 <main+0x554>)
 80011c6:	4833      	ldr	r0, [pc, #204]	; (8001294 <main+0x548>)
 80011c8:	f7ff fc00 	bl	80009cc <Lcd_string>
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0) //read
 80011cc:	2102      	movs	r1, #2
 80011ce:	4835      	ldr	r0, [pc, #212]	; (80012a4 <main+0x558>)
 80011d0:	f001 f922 	bl	8002418 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <main+0x496>
				{
					key = 16;
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <main+0x55c>)
 80011dc:	2210      	movs	r2, #16
 80011de:	701a      	strb	r2, [r3, #0]
					break;
 80011e0:	e01a      	b.n	8001218 <main+0x4cc>
				}
				HAL_Delay(150);
 80011e2:	2096      	movs	r0, #150	; 0x96
 80011e4:	f000 feb8 	bl	8001f58 <HAL_Delay>
				Lcd_cursor(&lcd, 1,15);
 80011e8:	220f      	movs	r2, #15
 80011ea:	2101      	movs	r1, #1
 80011ec:	4829      	ldr	r0, [pc, #164]	; (8001294 <main+0x548>)
 80011ee:	f7ff fc0b 	bl	8000a08 <Lcd_cursor>
				Lcd_string(&lcd, " ");
 80011f2:	492e      	ldr	r1, [pc, #184]	; (80012ac <main+0x560>)
 80011f4:	4827      	ldr	r0, [pc, #156]	; (8001294 <main+0x548>)
 80011f6:	f7ff fbe9 	bl	80009cc <Lcd_string>
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0) //read
 80011fa:	2102      	movs	r1, #2
 80011fc:	4829      	ldr	r0, [pc, #164]	; (80012a4 <main+0x558>)
 80011fe:	f001 f90b 	bl	8002418 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d103      	bne.n	8001210 <main+0x4c4>
				{
					key = 16;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <main+0x55c>)
 800120a:	2210      	movs	r2, #16
 800120c:	701a      	strb	r2, [r3, #0]
					break;
 800120e:	e003      	b.n	8001218 <main+0x4cc>
				}
				HAL_Delay(150);
 8001210:	2096      	movs	r0, #150	; 0x96
 8001212:	f000 fea1 	bl	8001f58 <HAL_Delay>
				Lcd_cursor(&lcd, 1,15);
 8001216:	e7d0      	b.n	80011ba <main+0x46e>
			}
			break;
 8001218:	e03a      	b.n	8001290 <main+0x544>

		case 16:
			Lcd_clear(&lcd);
 800121a:	481e      	ldr	r0, [pc, #120]	; (8001294 <main+0x548>)
 800121c:	f7ff fc0e 	bl	8000a3c <Lcd_clear>
			key = 17;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <main+0x55c>)
 8001222:	2211      	movs	r2, #17
 8001224:	701a      	strb	r2, [r3, #0]
			break;
 8001226:	e033      	b.n	8001290 <main+0x544>

		case 17:
			ReadOWDevice();
 8001228:	f000 fbca 	bl	80019c0 <ReadOWDevice>
			WriteMemory();
 800122c:	f000 fb6c 	bl	8001908 <WriteMemory>
			key = 18;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <main+0x55c>)
 8001232:	2212      	movs	r2, #18
 8001234:	701a      	strb	r2, [r3, #0]
			break;
 8001236:	e02b      	b.n	8001290 <main+0x544>

		case 18:
			Lcd_clear(&lcd);
 8001238:	4816      	ldr	r0, [pc, #88]	; (8001294 <main+0x548>)
 800123a:	f7ff fbff 	bl	8000a3c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	4814      	ldr	r0, [pc, #80]	; (8001294 <main+0x548>)
 8001244:	f7ff fbe0 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "OK! Press 'W' to");
 8001248:	491e      	ldr	r1, [pc, #120]	; (80012c4 <main+0x578>)
 800124a:	4812      	ldr	r0, [pc, #72]	; (8001294 <main+0x548>)
 800124c:	f7ff fbbe 	bl	80009cc <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8001250:	2200      	movs	r2, #0
 8001252:	2101      	movs	r1, #1
 8001254:	480f      	ldr	r0, [pc, #60]	; (8001294 <main+0x548>)
 8001256:	f7ff fbd7 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "return Main Menu");
 800125a:	491b      	ldr	r1, [pc, #108]	; (80012c8 <main+0x57c>)
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <main+0x548>)
 800125e:	f7ff fbb5 	bl	80009cc <Lcd_string>
			key = 19;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <main+0x55c>)
 8001264:	2213      	movs	r2, #19
 8001266:	701a      	strb	r2, [r3, #0]
			break;
 8001268:	e012      	b.n	8001290 <main+0x544>

		case 19:
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0) //read
 800126a:	2102      	movs	r1, #2
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <main+0x558>)
 800126e:	f001 f8d3 	bl	8002418 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10a      	bne.n	800128e <main+0x542>
				{
					Lcd_clear(&lcd);
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <main+0x548>)
 800127a:	f7ff fbdf 	bl	8000a3c <Lcd_clear>
					key = 0;
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <main+0x55c>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
					break;
 8001284:	e004      	b.n	8001290 <main+0x544>
			break;
 8001286:	bf00      	nop
 8001288:	e5b6      	b.n	8000df8 <main+0xac>
			break;
 800128a:	bf00      	nop
 800128c:	e5b4      	b.n	8000df8 <main+0xac>
				}
			break;
 800128e:	bf00      	nop
		switch (key) {
 8001290:	e5b2      	b.n	8000df8 <main+0xac>
 8001292:	bf00      	nop
 8001294:	200000dc 	.word	0x200000dc
 8001298:	0800497c 	.word	0x0800497c
 800129c:	08004990 	.word	0x08004990
 80012a0:	08004974 	.word	0x08004974
 80012a4:	40011800 	.word	0x40011800
 80012a8:	200000cc 	.word	0x200000cc
 80012ac:	08004978 	.word	0x08004978
 80012b0:	200000f4 	.word	0x200000f4
 80012b4:	080049a0 	.word	0x080049a0
 80012b8:	080049b0 	.word	0x080049b0
 80012bc:	080049bc 	.word	0x080049bc
 80012c0:	080049c0 	.word	0x080049c0
 80012c4:	080049cc 	.word	0x080049cc
 80012c8:	080049e0 	.word	0x080049e0

080012cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	; 0x50
 80012d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0318 	add.w	r3, r7, #24
 80012d6:	2238      	movs	r2, #56	; 0x38
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 ff00 	bl	80040e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	4618      	mov	r0, r3
 8001306:	f002 f9a1 	bl	800364c <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x48>
	{
		Error_Handler();
 8001310:	f000 fcda 	bl	8001cc8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001314:	230f      	movs	r3, #15
 8001316:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001318:	2301      	movs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fca3 	bl	8003c78 <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001338:	f000 fcc6 	bl	8001cc8 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <SystemClock_Config+0x80>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	3750      	adds	r7, #80	; 0x50
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	42420070 	.word	0x42420070

08001350 <ErrorLed>:

/* USER CODE BEGIN 4 */

void ErrorLed(uint8_t status)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	if(status == 0)
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d106      	bne.n	800136e <ErrorLed+0x1e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <ErrorLed+0x34>)
 8001368:	f001 f86d 	bl	8002446 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 800136c:	e005      	b.n	800137a <ErrorLed+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <ErrorLed+0x34>)
 8001376:	f001 f866 	bl	8002446 <HAL_GPIO_WritePin>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40011000 	.word	0x40011000

08001388 <BusyLed>:

void BusyLed(uint8_t status)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	if(status == 0)
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d106      	bne.n	80013a6 <BusyLed+0x1e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800139e:	4807      	ldr	r0, [pc, #28]	; (80013bc <BusyLed+0x34>)
 80013a0:	f001 f851 	bl	8002446 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
	}
}
 80013a4:	e005      	b.n	80013b2 <BusyLed+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <BusyLed+0x34>)
 80013ae:	f001 f84a 	bl	8002446 <HAL_GPIO_WritePin>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40011000 	.word	0x40011000

080013c0 <ReadLed>:

void ReadLed(uint8_t status)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	if(status == 0)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d106      	bne.n	80013de <ReadLed+0x1e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <ReadLed+0x34>)
 80013d8:	f001 f835 	bl	8002446 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80013dc:	e005      	b.n	80013ea <ReadLed+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <ReadLed+0x34>)
 80013e6:	f001 f82e 	bl	8002446 <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40011000 	.word	0x40011000

080013f8 <SelectChannels>:

void SelectChannels()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == 0)
 80013fc:	2101      	movs	r1, #1
 80013fe:	4838      	ldr	r0, [pc, #224]	; (80014e0 <SelectChannels+0xe8>)
 8001400:	f001 f80a 	bl	8002418 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <SelectChannels+0x1a>
	{
		channel[0] = 1;
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <SelectChannels+0xec>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e002      	b.n	8001418 <SelectChannels+0x20>
	}
	else
	{
		channel[0] = 0;
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <SelectChannels+0xec>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == 0)
 8001418:	2102      	movs	r1, #2
 800141a:	4831      	ldr	r0, [pc, #196]	; (80014e0 <SelectChannels+0xe8>)
 800141c:	f000 fffc 	bl	8002418 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <SelectChannels+0x36>
	{
		channel[1] = 1;
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <SelectChannels+0xec>)
 8001428:	2201      	movs	r2, #1
 800142a:	705a      	strb	r2, [r3, #1]
 800142c:	e002      	b.n	8001434 <SelectChannels+0x3c>
	}
	else
	{
		channel[1] = 0;
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <SelectChannels+0xec>)
 8001430:	2200      	movs	r2, #0
 8001432:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0)
 8001434:	2104      	movs	r1, #4
 8001436:	482a      	ldr	r0, [pc, #168]	; (80014e0 <SelectChannels+0xe8>)
 8001438:	f000 ffee 	bl	8002418 <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <SelectChannels+0x52>
	{
		channel[2] = 1;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <SelectChannels+0xec>)
 8001444:	2201      	movs	r2, #1
 8001446:	709a      	strb	r2, [r3, #2]
 8001448:	e002      	b.n	8001450 <SelectChannels+0x58>
	}
	else
	{
		channel[2] = 0;
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <SelectChannels+0xec>)
 800144c:	2200      	movs	r2, #0
 800144e:	709a      	strb	r2, [r3, #2]
	}
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == 0)
 8001450:	2108      	movs	r1, #8
 8001452:	4823      	ldr	r0, [pc, #140]	; (80014e0 <SelectChannels+0xe8>)
 8001454:	f000 ffe0 	bl	8002418 <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <SelectChannels+0x6e>
	{
		channel[3] = 1;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <SelectChannels+0xec>)
 8001460:	2201      	movs	r2, #1
 8001462:	70da      	strb	r2, [r3, #3]
 8001464:	e002      	b.n	800146c <SelectChannels+0x74>
	}
	else
	{
		channel[3] = 0;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <SelectChannels+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	70da      	strb	r2, [r3, #3]
	}
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0)
 800146c:	2110      	movs	r1, #16
 800146e:	481c      	ldr	r0, [pc, #112]	; (80014e0 <SelectChannels+0xe8>)
 8001470:	f000 ffd2 	bl	8002418 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <SelectChannels+0x8a>
	{
		channel[4] = 1;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <SelectChannels+0xec>)
 800147c:	2201      	movs	r2, #1
 800147e:	711a      	strb	r2, [r3, #4]
 8001480:	e002      	b.n	8001488 <SelectChannels+0x90>
	}
	else
	{
		channel[4] = 0;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <SelectChannels+0xec>)
 8001484:	2200      	movs	r2, #0
 8001486:	711a      	strb	r2, [r3, #4]
	}
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) == 0)
 8001488:	2120      	movs	r1, #32
 800148a:	4815      	ldr	r0, [pc, #84]	; (80014e0 <SelectChannels+0xe8>)
 800148c:	f000 ffc4 	bl	8002418 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <SelectChannels+0xa6>
	{
		channel[5] = 1;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <SelectChannels+0xec>)
 8001498:	2201      	movs	r2, #1
 800149a:	715a      	strb	r2, [r3, #5]
 800149c:	e002      	b.n	80014a4 <SelectChannels+0xac>
	}
	else
	{
		channel[5] = 0;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <SelectChannels+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	715a      	strb	r2, [r3, #5]
	}
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0)
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <SelectChannels+0xe8>)
 80014a8:	f000 ffb6 	bl	8002418 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <SelectChannels+0xc2>
	{
		channel[6] = 1;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <SelectChannels+0xec>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	719a      	strb	r2, [r3, #6]
 80014b8:	e002      	b.n	80014c0 <SelectChannels+0xc8>
	}
	else
	{
		channel[6] = 0;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <SelectChannels+0xec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	719a      	strb	r2, [r3, #6]
	}
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == 0)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	4807      	ldr	r0, [pc, #28]	; (80014e0 <SelectChannels+0xe8>)
 80014c4:	f000 ffa8 	bl	8002418 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d103      	bne.n	80014d6 <SelectChannels+0xde>
	{
		channel[7] = 1;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SelectChannels+0xec>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		channel[7] = 0;
	}
}
 80014d4:	e002      	b.n	80014dc <SelectChannels+0xe4>
		channel[7] = 0;
 80014d6:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <SelectChannels+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	71da      	strb	r2, [r3, #7]
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40011400 	.word	0x40011400
 80014e4:	20000148 	.word	0x20000148

080014e8 <DrawSelectChannel>:

void DrawSelectChannel()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	if(channel[0] == 0)
 80014ec:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <DrawSelectChannel+0x178>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <DrawSelectChannel+0x20>
	{
		Lcd_cursor(&lcd, 1, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	485a      	ldr	r0, [pc, #360]	; (8001664 <DrawSelectChannel+0x17c>)
 80014fa:	f7ff fa85 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "1");
 80014fe:	495a      	ldr	r1, [pc, #360]	; (8001668 <DrawSelectChannel+0x180>)
 8001500:	4858      	ldr	r0, [pc, #352]	; (8001664 <DrawSelectChannel+0x17c>)
 8001502:	f7ff fa63 	bl	80009cc <Lcd_string>
 8001506:	e008      	b.n	800151a <DrawSelectChannel+0x32>
	}
	else
	{
		Lcd_cursor(&lcd, 1, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2101      	movs	r1, #1
 800150c:	4855      	ldr	r0, [pc, #340]	; (8001664 <DrawSelectChannel+0x17c>)
 800150e:	f7ff fa7b 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, " ");
 8001512:	4956      	ldr	r1, [pc, #344]	; (800166c <DrawSelectChannel+0x184>)
 8001514:	4853      	ldr	r0, [pc, #332]	; (8001664 <DrawSelectChannel+0x17c>)
 8001516:	f7ff fa59 	bl	80009cc <Lcd_string>
	}

	if(channel[1] == 0)
 800151a:	4b51      	ldr	r3, [pc, #324]	; (8001660 <DrawSelectChannel+0x178>)
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <DrawSelectChannel+0x4e>
	{
		Lcd_cursor(&lcd, 1, 2);
 8001522:	2202      	movs	r2, #2
 8001524:	2101      	movs	r1, #1
 8001526:	484f      	ldr	r0, [pc, #316]	; (8001664 <DrawSelectChannel+0x17c>)
 8001528:	f7ff fa6e 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "2");
 800152c:	4950      	ldr	r1, [pc, #320]	; (8001670 <DrawSelectChannel+0x188>)
 800152e:	484d      	ldr	r0, [pc, #308]	; (8001664 <DrawSelectChannel+0x17c>)
 8001530:	f7ff fa4c 	bl	80009cc <Lcd_string>
 8001534:	e008      	b.n	8001548 <DrawSelectChannel+0x60>
	}
	else
	{
		Lcd_cursor(&lcd, 1, 2);
 8001536:	2202      	movs	r2, #2
 8001538:	2101      	movs	r1, #1
 800153a:	484a      	ldr	r0, [pc, #296]	; (8001664 <DrawSelectChannel+0x17c>)
 800153c:	f7ff fa64 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, " ");
 8001540:	494a      	ldr	r1, [pc, #296]	; (800166c <DrawSelectChannel+0x184>)
 8001542:	4848      	ldr	r0, [pc, #288]	; (8001664 <DrawSelectChannel+0x17c>)
 8001544:	f7ff fa42 	bl	80009cc <Lcd_string>
	}

	if(channel[2] == 0)
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <DrawSelectChannel+0x178>)
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <DrawSelectChannel+0x7c>
	{
		Lcd_cursor(&lcd, 1, 4);
 8001550:	2204      	movs	r2, #4
 8001552:	2101      	movs	r1, #1
 8001554:	4843      	ldr	r0, [pc, #268]	; (8001664 <DrawSelectChannel+0x17c>)
 8001556:	f7ff fa57 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "3");
 800155a:	4946      	ldr	r1, [pc, #280]	; (8001674 <DrawSelectChannel+0x18c>)
 800155c:	4841      	ldr	r0, [pc, #260]	; (8001664 <DrawSelectChannel+0x17c>)
 800155e:	f7ff fa35 	bl	80009cc <Lcd_string>
 8001562:	e008      	b.n	8001576 <DrawSelectChannel+0x8e>
	}
	else
	{
		Lcd_cursor(&lcd, 1, 4);
 8001564:	2204      	movs	r2, #4
 8001566:	2101      	movs	r1, #1
 8001568:	483e      	ldr	r0, [pc, #248]	; (8001664 <DrawSelectChannel+0x17c>)
 800156a:	f7ff fa4d 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, " ");
 800156e:	493f      	ldr	r1, [pc, #252]	; (800166c <DrawSelectChannel+0x184>)
 8001570:	483c      	ldr	r0, [pc, #240]	; (8001664 <DrawSelectChannel+0x17c>)
 8001572:	f7ff fa2b 	bl	80009cc <Lcd_string>
	}

	if(channel[3] == 0)
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <DrawSelectChannel+0x178>)
 8001578:	78db      	ldrb	r3, [r3, #3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <DrawSelectChannel+0xaa>
	{
		Lcd_cursor(&lcd, 1, 6);
 800157e:	2206      	movs	r2, #6
 8001580:	2101      	movs	r1, #1
 8001582:	4838      	ldr	r0, [pc, #224]	; (8001664 <DrawSelectChannel+0x17c>)
 8001584:	f7ff fa40 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "4");
 8001588:	493b      	ldr	r1, [pc, #236]	; (8001678 <DrawSelectChannel+0x190>)
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <DrawSelectChannel+0x17c>)
 800158c:	f7ff fa1e 	bl	80009cc <Lcd_string>
 8001590:	e008      	b.n	80015a4 <DrawSelectChannel+0xbc>
	}
	else
	{
		Lcd_cursor(&lcd, 1, 6);
 8001592:	2206      	movs	r2, #6
 8001594:	2101      	movs	r1, #1
 8001596:	4833      	ldr	r0, [pc, #204]	; (8001664 <DrawSelectChannel+0x17c>)
 8001598:	f7ff fa36 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, " ");
 800159c:	4933      	ldr	r1, [pc, #204]	; (800166c <DrawSelectChannel+0x184>)
 800159e:	4831      	ldr	r0, [pc, #196]	; (8001664 <DrawSelectChannel+0x17c>)
 80015a0:	f7ff fa14 	bl	80009cc <Lcd_string>
	}

	if(channel[4] == 0)
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <DrawSelectChannel+0x178>)
 80015a6:	791b      	ldrb	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <DrawSelectChannel+0xd8>
	{
		Lcd_cursor(&lcd, 1, 8);
 80015ac:	2208      	movs	r2, #8
 80015ae:	2101      	movs	r1, #1
 80015b0:	482c      	ldr	r0, [pc, #176]	; (8001664 <DrawSelectChannel+0x17c>)
 80015b2:	f7ff fa29 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "5");
 80015b6:	4931      	ldr	r1, [pc, #196]	; (800167c <DrawSelectChannel+0x194>)
 80015b8:	482a      	ldr	r0, [pc, #168]	; (8001664 <DrawSelectChannel+0x17c>)
 80015ba:	f7ff fa07 	bl	80009cc <Lcd_string>
 80015be:	e008      	b.n	80015d2 <DrawSelectChannel+0xea>
	}
	else
	{
		Lcd_cursor(&lcd, 1, 8);
 80015c0:	2208      	movs	r2, #8
 80015c2:	2101      	movs	r1, #1
 80015c4:	4827      	ldr	r0, [pc, #156]	; (8001664 <DrawSelectChannel+0x17c>)
 80015c6:	f7ff fa1f 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, " ");
 80015ca:	4928      	ldr	r1, [pc, #160]	; (800166c <DrawSelectChannel+0x184>)
 80015cc:	4825      	ldr	r0, [pc, #148]	; (8001664 <DrawSelectChannel+0x17c>)
 80015ce:	f7ff f9fd 	bl	80009cc <Lcd_string>
	}

	if(channel[5] == 0)
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <DrawSelectChannel+0x178>)
 80015d4:	795b      	ldrb	r3, [r3, #5]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <DrawSelectChannel+0x106>
	{
		Lcd_cursor(&lcd, 1, 10);
 80015da:	220a      	movs	r2, #10
 80015dc:	2101      	movs	r1, #1
 80015de:	4821      	ldr	r0, [pc, #132]	; (8001664 <DrawSelectChannel+0x17c>)
 80015e0:	f7ff fa12 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "6");
 80015e4:	4926      	ldr	r1, [pc, #152]	; (8001680 <DrawSelectChannel+0x198>)
 80015e6:	481f      	ldr	r0, [pc, #124]	; (8001664 <DrawSelectChannel+0x17c>)
 80015e8:	f7ff f9f0 	bl	80009cc <Lcd_string>
 80015ec:	e008      	b.n	8001600 <DrawSelectChannel+0x118>
	}
	else
	{
		Lcd_cursor(&lcd, 1, 10);
 80015ee:	220a      	movs	r2, #10
 80015f0:	2101      	movs	r1, #1
 80015f2:	481c      	ldr	r0, [pc, #112]	; (8001664 <DrawSelectChannel+0x17c>)
 80015f4:	f7ff fa08 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, " ");
 80015f8:	491c      	ldr	r1, [pc, #112]	; (800166c <DrawSelectChannel+0x184>)
 80015fa:	481a      	ldr	r0, [pc, #104]	; (8001664 <DrawSelectChannel+0x17c>)
 80015fc:	f7ff f9e6 	bl	80009cc <Lcd_string>
	}

	if(channel[6] == 0)
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <DrawSelectChannel+0x178>)
 8001602:	799b      	ldrb	r3, [r3, #6]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <DrawSelectChannel+0x134>
	{
		Lcd_cursor(&lcd, 1, 12);
 8001608:	220c      	movs	r2, #12
 800160a:	2101      	movs	r1, #1
 800160c:	4815      	ldr	r0, [pc, #84]	; (8001664 <DrawSelectChannel+0x17c>)
 800160e:	f7ff f9fb 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "7");
 8001612:	491c      	ldr	r1, [pc, #112]	; (8001684 <DrawSelectChannel+0x19c>)
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <DrawSelectChannel+0x17c>)
 8001616:	f7ff f9d9 	bl	80009cc <Lcd_string>
 800161a:	e008      	b.n	800162e <DrawSelectChannel+0x146>
	}
	else
	{
		Lcd_cursor(&lcd, 1, 12);
 800161c:	220c      	movs	r2, #12
 800161e:	2101      	movs	r1, #1
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <DrawSelectChannel+0x17c>)
 8001622:	f7ff f9f1 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, " ");
 8001626:	4911      	ldr	r1, [pc, #68]	; (800166c <DrawSelectChannel+0x184>)
 8001628:	480e      	ldr	r0, [pc, #56]	; (8001664 <DrawSelectChannel+0x17c>)
 800162a:	f7ff f9cf 	bl	80009cc <Lcd_string>
	}

	if(channel[7] == 0)
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <DrawSelectChannel+0x178>)
 8001630:	79db      	ldrb	r3, [r3, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <DrawSelectChannel+0x162>
	{
		Lcd_cursor(&lcd, 1, 14);
 8001636:	220e      	movs	r2, #14
 8001638:	2101      	movs	r1, #1
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <DrawSelectChannel+0x17c>)
 800163c:	f7ff f9e4 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "8");
 8001640:	4911      	ldr	r1, [pc, #68]	; (8001688 <DrawSelectChannel+0x1a0>)
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <DrawSelectChannel+0x17c>)
 8001644:	f7ff f9c2 	bl	80009cc <Lcd_string>
	else
	{
		Lcd_cursor(&lcd, 1, 14);
		Lcd_string(&lcd, " ");
	}
}
 8001648:	e008      	b.n	800165c <DrawSelectChannel+0x174>
		Lcd_cursor(&lcd, 1, 14);
 800164a:	220e      	movs	r2, #14
 800164c:	2101      	movs	r1, #1
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <DrawSelectChannel+0x17c>)
 8001650:	f7ff f9da 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, " ");
 8001654:	4905      	ldr	r1, [pc, #20]	; (800166c <DrawSelectChannel+0x184>)
 8001656:	4803      	ldr	r0, [pc, #12]	; (8001664 <DrawSelectChannel+0x17c>)
 8001658:	f7ff f9b8 	bl	80009cc <Lcd_string>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000148 	.word	0x20000148
 8001664:	200000dc 	.word	0x200000dc
 8001668:	08004a0c 	.word	0x08004a0c
 800166c:	08004978 	.word	0x08004978
 8001670:	08004a10 	.word	0x08004a10
 8001674:	08004a14 	.word	0x08004a14
 8001678:	08004a18 	.word	0x08004a18
 800167c:	08004a1c 	.word	0x08004a1c
 8001680:	08004a20 	.word	0x08004a20
 8001684:	08004a24 	.word	0x08004a24
 8001688:	08004a28 	.word	0x08004a28

0800168c <DrawAnimation>:

void DrawAnimation()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
	for (int i = 0; i<15; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	e010      	b.n	80016ba <DrawAnimation+0x2e>
	{
		Lcd_cursor(&lcd, 0,i);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	4815      	ldr	r0, [pc, #84]	; (80016f8 <DrawAnimation+0x6c>)
 80016a2:	f7ff f9b1 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, ">");
 80016a6:	4915      	ldr	r1, [pc, #84]	; (80016fc <DrawAnimation+0x70>)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <DrawAnimation+0x6c>)
 80016aa:	f7ff f98f 	bl	80009cc <Lcd_string>
		HAL_Delay(10);
 80016ae:	200a      	movs	r0, #10
 80016b0:	f000 fc52 	bl	8001f58 <HAL_Delay>
	for (int i = 0; i<15; i++)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0e      	cmp	r3, #14
 80016be:	ddeb      	ble.n	8001698 <DrawAnimation+0xc>
	}
	for (int i = 15; i>0; i--)
 80016c0:	230f      	movs	r3, #15
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	e010      	b.n	80016e8 <DrawAnimation+0x5c>
	{
		Lcd_cursor(&lcd, 1,i);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	2101      	movs	r1, #1
 80016ce:	480a      	ldr	r0, [pc, #40]	; (80016f8 <DrawAnimation+0x6c>)
 80016d0:	f7ff f99a 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "<");
 80016d4:	490a      	ldr	r1, [pc, #40]	; (8001700 <DrawAnimation+0x74>)
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <DrawAnimation+0x6c>)
 80016d8:	f7ff f978 	bl	80009cc <Lcd_string>
		HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f000 fc3b 	bl	8001f58 <HAL_Delay>
	for (int i = 15; i>0; i--)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	dceb      	bgt.n	80016c6 <DrawAnimation+0x3a>
	}
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000dc 	.word	0x200000dc
 80016fc:	08004974 	.word	0x08004974
 8001700:	08004a2c 	.word	0x08004a2c

08001704 <Rel>:
		}
	}
}

void Rel(int number)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	switch (number) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b07      	cmp	r3, #7
 8001710:	f200 80dc 	bhi.w	80018cc <Rel+0x1c8>
 8001714:	a201      	add	r2, pc, #4	; (adr r2, 800171c <Rel+0x18>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	0800173d 	.word	0x0800173d
 8001720:	0800176f 	.word	0x0800176f
 8001724:	080017a1 	.word	0x080017a1
 8001728:	080017d3 	.word	0x080017d3
 800172c:	08001805 	.word	0x08001805
 8001730:	08001837 	.word	0x08001837
 8001734:	08001869 	.word	0x08001869
 8001738:	0800189b 	.word	0x0800189b
	case 0:
		REL_1(ON); REL_2(OFF); REL_3(OFF); REL_4(OFF); REL_5(OFF); REL_6(OFF); REL_7(OFF); REL_8(OFF);
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff fa25 	bl	8000b8c <REL_1>
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fa3e 	bl	8000bc4 <REL_2>
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fa57 	bl	8000bfc <REL_3>
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fa70 	bl	8000c34 <REL_4>
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fa89 	bl	8000c6c <REL_5>
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff faa2 	bl	8000ca4 <REL_6>
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff fabb 	bl	8000cdc <REL_7>
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fad4 	bl	8000d14 <REL_8>
		break;
 800176c:	e0c7      	b.n	80018fe <Rel+0x1fa>
	case 1:
		REL_1(OFF); REL_2(ON); REL_3(OFF); REL_4(OFF); REL_5(OFF); REL_6(OFF); REL_7(OFF); REL_8(OFF);
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff fa0c 	bl	8000b8c <REL_1>
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fa25 	bl	8000bc4 <REL_2>
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fa3e 	bl	8000bfc <REL_3>
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fa57 	bl	8000c34 <REL_4>
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff fa70 	bl	8000c6c <REL_5>
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fa89 	bl	8000ca4 <REL_6>
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff faa2 	bl	8000cdc <REL_7>
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fabb 	bl	8000d14 <REL_8>
		break;
 800179e:	e0ae      	b.n	80018fe <Rel+0x1fa>
	case 2:
		REL_1(OFF); REL_2(OFF); REL_3(ON); REL_4(OFF); REL_5(OFF); REL_6(OFF); REL_7(OFF); REL_8(OFF);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff f9f3 	bl	8000b8c <REL_1>
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fa0c 	bl	8000bc4 <REL_2>
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff fa25 	bl	8000bfc <REL_3>
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fa3e 	bl	8000c34 <REL_4>
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff fa57 	bl	8000c6c <REL_5>
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fa70 	bl	8000ca4 <REL_6>
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff fa89 	bl	8000cdc <REL_7>
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff faa2 	bl	8000d14 <REL_8>
		break;
 80017d0:	e095      	b.n	80018fe <Rel+0x1fa>
	case 3:
		REL_1(OFF); REL_2(OFF); REL_3(OFF); REL_4(ON); REL_5(OFF); REL_6(OFF); REL_7(OFF); REL_8(OFF);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff f9da 	bl	8000b8c <REL_1>
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff f9f3 	bl	8000bc4 <REL_2>
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fa0c 	bl	8000bfc <REL_3>
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff fa25 	bl	8000c34 <REL_4>
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fa3e 	bl	8000c6c <REL_5>
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff fa57 	bl	8000ca4 <REL_6>
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fa70 	bl	8000cdc <REL_7>
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fa89 	bl	8000d14 <REL_8>
		break;
 8001802:	e07c      	b.n	80018fe <Rel+0x1fa>
	case 4:
		REL_1(OFF); REL_2(OFF); REL_3(OFF); REL_4(OFF); REL_5(ON); REL_6(OFF); REL_7(OFF); REL_8(OFF);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff f9c1 	bl	8000b8c <REL_1>
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff f9da 	bl	8000bc4 <REL_2>
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff f9f3 	bl	8000bfc <REL_3>
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fa0c 	bl	8000c34 <REL_4>
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff fa25 	bl	8000c6c <REL_5>
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff fa3e 	bl	8000ca4 <REL_6>
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fa57 	bl	8000cdc <REL_7>
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff fa70 	bl	8000d14 <REL_8>
		break;
 8001834:	e063      	b.n	80018fe <Rel+0x1fa>
	case 5:
		REL_1(OFF); REL_2(OFF); REL_3(OFF); REL_4(OFF); REL_5(OFF); REL_6(ON); REL_7(OFF); REL_8(OFF);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff f9a8 	bl	8000b8c <REL_1>
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff f9c1 	bl	8000bc4 <REL_2>
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff f9da 	bl	8000bfc <REL_3>
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff f9f3 	bl	8000c34 <REL_4>
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff fa0c 	bl	8000c6c <REL_5>
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff fa25 	bl	8000ca4 <REL_6>
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff fa3e 	bl	8000cdc <REL_7>
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fa57 	bl	8000d14 <REL_8>
		break;
 8001866:	e04a      	b.n	80018fe <Rel+0x1fa>
	case 6:
		REL_1(OFF); REL_2(OFF); REL_3(OFF); REL_4(OFF); REL_5(OFF); REL_6(OFF); REL_7(ON); REL_8(OFF);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff f98f 	bl	8000b8c <REL_1>
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff f9a8 	bl	8000bc4 <REL_2>
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff f9c1 	bl	8000bfc <REL_3>
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff f9da 	bl	8000c34 <REL_4>
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff f9f3 	bl	8000c6c <REL_5>
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fa0c 	bl	8000ca4 <REL_6>
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff fa25 	bl	8000cdc <REL_7>
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fa3e 	bl	8000d14 <REL_8>
		break;
 8001898:	e031      	b.n	80018fe <Rel+0x1fa>
	case 7:
		REL_1(OFF); REL_2(OFF); REL_3(OFF); REL_4(OFF); REL_5(OFF); REL_6(OFF); REL_7(OFF); REL_8(ON);
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff f976 	bl	8000b8c <REL_1>
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff f98f 	bl	8000bc4 <REL_2>
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff f9a8 	bl	8000bfc <REL_3>
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff f9c1 	bl	8000c34 <REL_4>
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff f9da 	bl	8000c6c <REL_5>
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff f9f3 	bl	8000ca4 <REL_6>
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff fa0c 	bl	8000cdc <REL_7>
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff fa25 	bl	8000d14 <REL_8>
		break;
 80018ca:	e018      	b.n	80018fe <Rel+0x1fa>
	default:
		REL_1(OFF); REL_2(OFF); REL_3(OFF); REL_4(OFF); REL_5(OFF); REL_6(OFF); REL_7(OFF); REL_8(OFF);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff f95d 	bl	8000b8c <REL_1>
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff f976 	bl	8000bc4 <REL_2>
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff f98f 	bl	8000bfc <REL_3>
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff f9a8 	bl	8000c34 <REL_4>
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff f9c1 	bl	8000c6c <REL_5>
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff f9da 	bl	8000ca4 <REL_6>
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff f9f3 	bl	8000cdc <REL_7>
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff fa0c 	bl	8000d14 <REL_8>
		break;
 80018fc:	bf00      	nop
	}
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop

08001908 <WriteMemory>:

void WriteMemory()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
	uint8_t xpos = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
	BusyLed(ON);
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff fd38 	bl	8001388 <BusyLed>
	for(int k = 0; k<8; k++)
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	e032      	b.n	8001984 <WriteMemory+0x7c>
	{
		if(channel[k] == 0)
 800191e:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <WriteMemory+0xa8>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d104      	bne.n	8001934 <WriteMemory+0x2c>
		{
			StatusPercent(k);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f936 	bl	8001ba0 <StatusPercent>
		}
		xpos = LinePosition(k);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f923 	bl	8001b84 <LinePosition>
 800193e:	4603      	mov	r3, r0
 8001940:	73fb      	strb	r3, [r7, #15]
		for(int i = 0; i<8; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e017      	b.n	8001978 <WriteMemory+0x70>
		{
			{
				if(channel[k] == 0)
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <WriteMemory+0xa8>)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10e      	bne.n	8001972 <WriteMemory+0x6a>
				{
					writeToMemory(sensor[k][i], 0x00 , xpos);
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <WriteMemory+0xac>)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	441a      	add	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f9b4 	bl	8001cd4 <writeToMemory>
					xpos = xpos+1;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	3301      	adds	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
		for(int i = 0; i<8; i++)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3301      	adds	r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b07      	cmp	r3, #7
 800197c:	dde4      	ble.n	8001948 <WriteMemory+0x40>
	for(int k = 0; k<8; k++)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3301      	adds	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b07      	cmp	r3, #7
 8001988:	ddc9      	ble.n	800191e <WriteMemory+0x16>
				}
			}
		}
	}

	Lcd_clear(&lcd);
 800198a:	480b      	ldr	r0, [pc, #44]	; (80019b8 <WriteMemory+0xb0>)
 800198c:	f7ff f856 	bl	8000a3c <Lcd_clear>
	Lcd_cursor(&lcd, 1, 6);
 8001990:	2206      	movs	r2, #6
 8001992:	2101      	movs	r1, #1
 8001994:	4808      	ldr	r0, [pc, #32]	; (80019b8 <WriteMemory+0xb0>)
 8001996:	f7ff f837 	bl	8000a08 <Lcd_cursor>
	Lcd_string(&lcd, "100%");
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <WriteMemory+0xb4>)
 800199c:	4806      	ldr	r0, [pc, #24]	; (80019b8 <WriteMemory+0xb0>)
 800199e:	f7ff f815 	bl	80009cc <Lcd_string>
	BusyLed(OFF);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff fcf0 	bl	8001388 <BusyLed>

}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000148 	.word	0x20000148
 80019b4:	2000008c 	.word	0x2000008c
 80019b8:	200000dc 	.word	0x200000dc
 80019bc:	08004a30 	.word	0x08004a30

080019c0 <ReadOWDevice>:

void ReadOWDevice()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
	ReadLed(ON);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff fcfa 	bl	80013c0 <ReadLed>
	Lcd_clear(&lcd);
 80019cc:	4821      	ldr	r0, [pc, #132]	; (8001a54 <ReadOWDevice+0x94>)
 80019ce:	f7ff f835 	bl	8000a3c <Lcd_clear>
	for(int k = 0; k<8; k++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e033      	b.n	8001a40 <ReadOWDevice+0x80>
	{
		if(channel[k] == 0)
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <ReadOWDevice+0x98>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10b      	bne.n	80019fc <ReadOWDevice+0x3c>
		{
			Rel(k);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fe8d 	bl	8001704 <Rel>
			HAL_Delay(500);
 80019ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ee:	f000 fab3 	bl	8001f58 <HAL_Delay>
			OWReset();
 80019f2:	f7fe fe11 	bl	8000618 <OWReset>
			OWWriteByte(0x33);
 80019f6:	2033      	movs	r0, #51	; 0x33
 80019f8:	f7fe fe2c 	bl	8000654 <OWWriteByte>
		}

		if(channel[k] == 0)
 80019fc:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <ReadOWDevice+0x98>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d118      	bne.n	8001a3a <ReadOWDevice+0x7a>
		{

			for(int i = 0; i<8; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	e00e      	b.n	8001a2c <ReadOWDevice+0x6c>
			{
				sensor[k][i] = OWReadByte();
 8001a0e:	f7fe fe45 	bl	800069c <OWReadByte>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <ReadOWDevice+0x9c>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	441a      	add	r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	460a      	mov	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b07      	cmp	r3, #7
 8001a30:	dded      	ble.n	8001a0e <ReadOWDevice+0x4e>
			}

			DS2842Reset();
 8001a32:	f7fe fd81 	bl	8000538 <DS2842Reset>
			OWReset();
 8001a36:	f7fe fdef 	bl	8000618 <OWReset>
	for(int k = 0; k<8; k++)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b07      	cmp	r3, #7
 8001a44:	ddc8      	ble.n	80019d8 <ReadOWDevice+0x18>
		}
	}
	ReadLed(OFF);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff fcba 	bl	80013c0 <ReadLed>

}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200000dc 	.word	0x200000dc
 8001a58:	20000148 	.word	0x20000148
 8001a5c:	2000008c 	.word	0x2000008c

08001a60 <AddressMenu>:

void AddressMenu(uint8_t channel)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	char str[8];
	char ch[2];

	if(channel != 8)
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d050      	beq.n	8001b12 <AddressMenu+0xb2>
	{
		Lcd_clear(&lcd);
 8001a70:	483a      	ldr	r0, [pc, #232]	; (8001b5c <AddressMenu+0xfc>)
 8001a72:	f7fe ffe3 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4838      	ldr	r0, [pc, #224]	; (8001b5c <AddressMenu+0xfc>)
 8001a7c:	f7fe ffc4 	bl	8000a08 <Lcd_cursor>

		for(int i = 0; i<8; i++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e016      	b.n	8001ab4 <AddressMenu+0x54>
		{
			sprintf(str, "%02X" , sensor[channel][i]);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	4a35      	ldr	r2, [pc, #212]	; (8001b60 <AddressMenu+0x100>)
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	441a      	add	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	4932      	ldr	r1, [pc, #200]	; (8001b64 <AddressMenu+0x104>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fb27 	bl	80040f0 <siprintf>
			Lcd_string(&lcd, str);
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	482c      	ldr	r0, [pc, #176]	; (8001b5c <AddressMenu+0xfc>)
 8001aaa:	f7fe ff8f 	bl	80009cc <Lcd_string>
		for(int i = 0; i<8; i++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	dde5      	ble.n	8001a86 <AddressMenu+0x26>
		}

		sprintf(ch, "%i" , channel+1);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4929      	ldr	r1, [pc, #164]	; (8001b68 <AddressMenu+0x108>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fb13 	bl	80040f0 <siprintf>

		Lcd_cursor(&lcd, 1, 3);
 8001aca:	2203      	movs	r2, #3
 8001acc:	2101      	movs	r1, #1
 8001ace:	4823      	ldr	r0, [pc, #140]	; (8001b5c <AddressMenu+0xfc>)
 8001ad0:	f7fe ff9a 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "Channel #");
 8001ad4:	4925      	ldr	r1, [pc, #148]	; (8001b6c <AddressMenu+0x10c>)
 8001ad6:	4821      	ldr	r0, [pc, #132]	; (8001b5c <AddressMenu+0xfc>)
 8001ad8:	f7fe ff78 	bl	80009cc <Lcd_string>
		Lcd_string(&lcd, ch);
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481e      	ldr	r0, [pc, #120]	; (8001b5c <AddressMenu+0xfc>)
 8001ae4:	f7fe ff72 	bl	80009cc <Lcd_string>
		Lcd_cursor(&lcd, 1, 14);
 8001ae8:	220e      	movs	r2, #14
 8001aea:	2101      	movs	r1, #1
 8001aec:	481b      	ldr	r0, [pc, #108]	; (8001b5c <AddressMenu+0xfc>)
 8001aee:	f7fe ff8b 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "W>");
 8001af2:	491f      	ldr	r1, [pc, #124]	; (8001b70 <AddressMenu+0x110>)
 8001af4:	4819      	ldr	r0, [pc, #100]	; (8001b5c <AddressMenu+0xfc>)
 8001af6:	f7fe ff69 	bl	80009cc <Lcd_string>
		if(channel != 0)
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <AddressMenu+0xb2>
		{
			Lcd_cursor(&lcd, 1,0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2101      	movs	r1, #1
 8001b04:	4815      	ldr	r0, [pc, #84]	; (8001b5c <AddressMenu+0xfc>)
 8001b06:	f7fe ff7f 	bl	8000a08 <Lcd_cursor>
			Lcd_string(&lcd, "<R");
 8001b0a:	491a      	ldr	r1, [pc, #104]	; (8001b74 <AddressMenu+0x114>)
 8001b0c:	4813      	ldr	r0, [pc, #76]	; (8001b5c <AddressMenu+0xfc>)
 8001b0e:	f7fe ff5d 	bl	80009cc <Lcd_string>
		}
	}


	if(channel == 8)
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d11d      	bne.n	8001b54 <AddressMenu+0xf4>
	{
		Lcd_clear(&lcd);
 8001b18:	4810      	ldr	r0, [pc, #64]	; (8001b5c <AddressMenu+0xfc>)
 8001b1a:	f7fe ff8f 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <AddressMenu+0xfc>)
 8001b24:	f7fe ff70 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "Exit to menu?");
 8001b28:	4913      	ldr	r1, [pc, #76]	; (8001b78 <AddressMenu+0x118>)
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <AddressMenu+0xfc>)
 8001b2c:	f7fe ff4e 	bl	80009cc <Lcd_string>
		Lcd_cursor(&lcd, 1, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2101      	movs	r1, #1
 8001b34:	4809      	ldr	r0, [pc, #36]	; (8001b5c <AddressMenu+0xfc>)
 8001b36:	f7fe ff67 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "<R(No)");
 8001b3a:	4910      	ldr	r1, [pc, #64]	; (8001b7c <AddressMenu+0x11c>)
 8001b3c:	4807      	ldr	r0, [pc, #28]	; (8001b5c <AddressMenu+0xfc>)
 8001b3e:	f7fe ff45 	bl	80009cc <Lcd_string>
		Lcd_cursor(&lcd, 1, 9);
 8001b42:	2209      	movs	r2, #9
 8001b44:	2101      	movs	r1, #1
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <AddressMenu+0xfc>)
 8001b48:	f7fe ff5e 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "(Yes)W>");
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <AddressMenu+0x120>)
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <AddressMenu+0xfc>)
 8001b50:	f7fe ff3c 	bl	80009cc <Lcd_string>
	}
}
 8001b54:	bf00      	nop
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200000dc 	.word	0x200000dc
 8001b60:	2000008c 	.word	0x2000008c
 8001b64:	08004a38 	.word	0x08004a38
 8001b68:	08004a40 	.word	0x08004a40
 8001b6c:	08004a44 	.word	0x08004a44
 8001b70:	08004a50 	.word	0x08004a50
 8001b74:	08004a54 	.word	0x08004a54
 8001b78:	08004a58 	.word	0x08004a58
 8001b7c:	08004a68 	.word	0x08004a68
 8001b80:	08004a70 	.word	0x08004a70

08001b84 <LinePosition>:

uint8_t LinePosition(uint8_t ch)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
	return (8*ch);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	b2db      	uxtb	r3, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <StatusPercent>:

void StatusPercent(uint8_t per)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	if(per == 0)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <StatusPercent+0x28>
	{
		Lcd_clear(&lcd);
 8001bb0:	483c      	ldr	r0, [pc, #240]	; (8001ca4 <StatusPercent+0x104>)
 8001bb2:	f7fe ff43 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 1, 6);
 8001bb6:	2206      	movs	r2, #6
 8001bb8:	2101      	movs	r1, #1
 8001bba:	483a      	ldr	r0, [pc, #232]	; (8001ca4 <StatusPercent+0x104>)
 8001bbc:	f7fe ff24 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "12.5%");
 8001bc0:	4939      	ldr	r1, [pc, #228]	; (8001ca8 <StatusPercent+0x108>)
 8001bc2:	4838      	ldr	r0, [pc, #224]	; (8001ca4 <StatusPercent+0x104>)
 8001bc4:	f7fe ff02 	bl	80009cc <Lcd_string>
	}
	if(per == 1)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10b      	bne.n	8001be6 <StatusPercent+0x46>
	{
		Lcd_clear(&lcd);
 8001bce:	4835      	ldr	r0, [pc, #212]	; (8001ca4 <StatusPercent+0x104>)
 8001bd0:	f7fe ff34 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 1, 6);
 8001bd4:	2206      	movs	r2, #6
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4832      	ldr	r0, [pc, #200]	; (8001ca4 <StatusPercent+0x104>)
 8001bda:	f7fe ff15 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "25%");
 8001bde:	4933      	ldr	r1, [pc, #204]	; (8001cac <StatusPercent+0x10c>)
 8001be0:	4830      	ldr	r0, [pc, #192]	; (8001ca4 <StatusPercent+0x104>)
 8001be2:	f7fe fef3 	bl	80009cc <Lcd_string>
	}
	if(per == 3)
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d10b      	bne.n	8001c04 <StatusPercent+0x64>
	{
		Lcd_clear(&lcd);
 8001bec:	482d      	ldr	r0, [pc, #180]	; (8001ca4 <StatusPercent+0x104>)
 8001bee:	f7fe ff25 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 1, 6);
 8001bf2:	2206      	movs	r2, #6
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	482b      	ldr	r0, [pc, #172]	; (8001ca4 <StatusPercent+0x104>)
 8001bf8:	f7fe ff06 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "37.5%");
 8001bfc:	492c      	ldr	r1, [pc, #176]	; (8001cb0 <StatusPercent+0x110>)
 8001bfe:	4829      	ldr	r0, [pc, #164]	; (8001ca4 <StatusPercent+0x104>)
 8001c00:	f7fe fee4 	bl	80009cc <Lcd_string>
	}
	if(per == 3)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d10b      	bne.n	8001c22 <StatusPercent+0x82>
	{
		Lcd_clear(&lcd);
 8001c0a:	4826      	ldr	r0, [pc, #152]	; (8001ca4 <StatusPercent+0x104>)
 8001c0c:	f7fe ff16 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 1, 6);
 8001c10:	2206      	movs	r2, #6
 8001c12:	2101      	movs	r1, #1
 8001c14:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <StatusPercent+0x104>)
 8001c16:	f7fe fef7 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "50%");
 8001c1a:	4926      	ldr	r1, [pc, #152]	; (8001cb4 <StatusPercent+0x114>)
 8001c1c:	4821      	ldr	r0, [pc, #132]	; (8001ca4 <StatusPercent+0x104>)
 8001c1e:	f7fe fed5 	bl	80009cc <Lcd_string>
	}
	if(per == 4)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d10b      	bne.n	8001c40 <StatusPercent+0xa0>
	{
		Lcd_clear(&lcd);
 8001c28:	481e      	ldr	r0, [pc, #120]	; (8001ca4 <StatusPercent+0x104>)
 8001c2a:	f7fe ff07 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 1, 6);
 8001c2e:	2206      	movs	r2, #6
 8001c30:	2101      	movs	r1, #1
 8001c32:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <StatusPercent+0x104>)
 8001c34:	f7fe fee8 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "62.5%");
 8001c38:	491f      	ldr	r1, [pc, #124]	; (8001cb8 <StatusPercent+0x118>)
 8001c3a:	481a      	ldr	r0, [pc, #104]	; (8001ca4 <StatusPercent+0x104>)
 8001c3c:	f7fe fec6 	bl	80009cc <Lcd_string>
	}
	if(per == 5)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d10b      	bne.n	8001c5e <StatusPercent+0xbe>
	{
		Lcd_clear(&lcd);
 8001c46:	4817      	ldr	r0, [pc, #92]	; (8001ca4 <StatusPercent+0x104>)
 8001c48:	f7fe fef8 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 1, 6);
 8001c4c:	2206      	movs	r2, #6
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <StatusPercent+0x104>)
 8001c52:	f7fe fed9 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "75%");
 8001c56:	4919      	ldr	r1, [pc, #100]	; (8001cbc <StatusPercent+0x11c>)
 8001c58:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <StatusPercent+0x104>)
 8001c5a:	f7fe feb7 	bl	80009cc <Lcd_string>
	}
	if(per == 6)
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b06      	cmp	r3, #6
 8001c62:	d10b      	bne.n	8001c7c <StatusPercent+0xdc>
	{
		Lcd_clear(&lcd);
 8001c64:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <StatusPercent+0x104>)
 8001c66:	f7fe fee9 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 1, 6);
 8001c6a:	2206      	movs	r2, #6
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <StatusPercent+0x104>)
 8001c70:	f7fe feca 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "87.5%");
 8001c74:	4912      	ldr	r1, [pc, #72]	; (8001cc0 <StatusPercent+0x120>)
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <StatusPercent+0x104>)
 8001c78:	f7fe fea8 	bl	80009cc <Lcd_string>
	}
	if(per == 7)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	2b07      	cmp	r3, #7
 8001c80:	d10b      	bne.n	8001c9a <StatusPercent+0xfa>
	{
		Lcd_clear(&lcd);
 8001c82:	4808      	ldr	r0, [pc, #32]	; (8001ca4 <StatusPercent+0x104>)
 8001c84:	f7fe feda 	bl	8000a3c <Lcd_clear>
		Lcd_cursor(&lcd, 1, 6);
 8001c88:	2206      	movs	r2, #6
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <StatusPercent+0x104>)
 8001c8e:	f7fe febb 	bl	8000a08 <Lcd_cursor>
		Lcd_string(&lcd, "100%");
 8001c92:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <StatusPercent+0x124>)
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <StatusPercent+0x104>)
 8001c96:	f7fe fe99 	bl	80009cc <Lcd_string>
	}
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200000dc 	.word	0x200000dc
 8001ca8:	08004a78 	.word	0x08004a78
 8001cac:	08004a80 	.word	0x08004a80
 8001cb0:	08004a84 	.word	0x08004a84
 8001cb4:	08004a8c 	.word	0x08004a8c
 8001cb8:	08004a90 	.word	0x08004a90
 8001cbc:	08004a98 	.word	0x08004a98
 8001cc0:	08004a9c 	.word	0x08004a9c
 8001cc4:	08004a30 	.word	0x08004a30

08001cc8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <writeToMemory>:


/*----------------------------------------------------------------------------------------*/

void writeToMemory(uint8_t Data, uint8_t MBS, uint8_t LBS)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	71bb      	strb	r3, [r7, #6]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	717b      	strb	r3, [r7, #5]
	uint8_t buf[3];
	buf[0] = MBS;
 8001ce6:	79bb      	ldrb	r3, [r7, #6]
 8001ce8:	733b      	strb	r3, [r7, #12]
	buf[1] = LBS;
 8001cea:	797b      	ldrb	r3, [r7, #5]
 8001cec:	737b      	strb	r3, [r7, #13]
	buf[2] = Data;
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, MEMADDRESS, buf, sizeof(buf), 10);
 8001cf2:	f107 020c 	add.w	r2, r7, #12
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	21a0      	movs	r1, #160	; 0xa0
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <writeToMemory+0x40>)
 8001d00:	f000 fcf2 	bl	80026e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 8001d04:	2032      	movs	r0, #50	; 0x32
 8001d06:	f000 f927 	bl	8001f58 <HAL_Delay>
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200000f4 	.word	0x200000f4

08001d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6193      	str	r3, [r2, #24]
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_MspInit+0x60>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_MspInit+0x60>)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <HardFault_Handler+0x4>

08001d8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <MemManage_Handler+0x4>

08001d94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <BusFault_Handler+0x4>

08001d9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <UsageFault_Handler+0x4>

08001da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 f8aa 	bl	8001f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_sbrk>:
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
 8001e00:	f002 f944 	bl	800408c <__errno>
 8001e04:	4602      	mov	r2, r0
 8001e06:	230c      	movs	r3, #12
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20010000 	.word	0x20010000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	200000d0 	.word	0x200000d0
 8001e38:	20000158 	.word	0x20000158

08001e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <Reset_Handler>:
 8001e48:	480c      	ldr	r0, [pc, #48]	; (8001e7c <LoopFillZerobss+0x12>)
 8001e4a:	490d      	ldr	r1, [pc, #52]	; (8001e80 <LoopFillZerobss+0x16>)
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <LoopFillZerobss+0x1a>)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:
 8001e52:	58d4      	ldr	r4, [r2, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:
 8001e58:	18c4      	adds	r4, r0, r3
 8001e5a:	428c      	cmp	r4, r1
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <LoopFillZerobss+0x1e>)
 8001e60:	4c0a      	ldr	r4, [pc, #40]	; (8001e8c <LoopFillZerobss+0x22>)
 8001e62:	2300      	movs	r3, #0
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:
 8001e6a:	42a2      	cmp	r2, r4
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>
 8001e6e:	f7ff ffe5 	bl	8001e3c <SystemInit>
 8001e72:	f002 f911 	bl	8004098 <__libc_init_array>
 8001e76:	f7fe ff69 	bl	8000d4c <main>
 8001e7a:	4770      	bx	lr
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000070 	.word	0x20000070
 8001e84:	08004b24 	.word	0x08004b24
 8001e88:	20000070 	.word	0x20000070
 8001e8c:	20000158 	.word	0x20000158

08001e90 <ADC1_2_IRQHandler>:
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_Init+0x28>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_Init+0x28>)
 8001e9e:	f043 0310 	orr.w	r3, r3, #16
 8001ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 f929 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f000 f808 	bl	8001ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb0:	f7ff ff32 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x54>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_InitTick+0x58>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f933 	bl	800214a <HAL_SYSTICK_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00e      	b.n	8001f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d80a      	bhi.n	8001f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f000 f909 	bl	8002112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <HAL_InitTick+0x5c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e000      	b.n	8001f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x1c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_IncTick+0x20>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_IncTick+0x20>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000150 	.word	0x20000150

08001f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <HAL_GetTick+0x10>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	20000150 	.word	0x20000150

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff fff0 	bl	8001f44 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_Delay+0x40>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffe0 	bl	8001f44 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff90 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff49 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff5e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff90 	bl	8002054 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5f 	bl	8002000 <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffb0 	bl	80020b8 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b08b      	sub	sp, #44	; 0x2c
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002176:	e127      	b.n	80023c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002178:	2201      	movs	r2, #1
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8116 	bne.w	80023c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b12      	cmp	r3, #18
 800219c:	d034      	beq.n	8002208 <HAL_GPIO_Init+0xa4>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d80d      	bhi.n	80021be <HAL_GPIO_Init+0x5a>
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d02b      	beq.n	80021fe <HAL_GPIO_Init+0x9a>
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d804      	bhi.n	80021b4 <HAL_GPIO_Init+0x50>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d031      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d01c      	beq.n	80021ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021b2:	e048      	b.n	8002246 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d043      	beq.n	8002240 <HAL_GPIO_Init+0xdc>
 80021b8:	2b11      	cmp	r3, #17
 80021ba:	d01b      	beq.n	80021f4 <HAL_GPIO_Init+0x90>
          break;
 80021bc:	e043      	b.n	8002246 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021be:	4a89      	ldr	r2, [pc, #548]	; (80023e4 <HAL_GPIO_Init+0x280>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d026      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021c4:	4a87      	ldr	r2, [pc, #540]	; (80023e4 <HAL_GPIO_Init+0x280>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d806      	bhi.n	80021d8 <HAL_GPIO_Init+0x74>
 80021ca:	4a87      	ldr	r2, [pc, #540]	; (80023e8 <HAL_GPIO_Init+0x284>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d020      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021d0:	4a86      	ldr	r2, [pc, #536]	; (80023ec <HAL_GPIO_Init+0x288>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_GPIO_Init+0xae>
          break;
 80021d6:	e036      	b.n	8002246 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021d8:	4a85      	ldr	r2, [pc, #532]	; (80023f0 <HAL_GPIO_Init+0x28c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021de:	4a85      	ldr	r2, [pc, #532]	; (80023f4 <HAL_GPIO_Init+0x290>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d016      	beq.n	8002212 <HAL_GPIO_Init+0xae>
 80021e4:	4a84      	ldr	r2, [pc, #528]	; (80023f8 <HAL_GPIO_Init+0x294>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0xae>
          break;
 80021ea:	e02c      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e028      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	3304      	adds	r3, #4
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	e023      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	3308      	adds	r3, #8
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e01e      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	330c      	adds	r3, #12
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e019      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800221a:	2304      	movs	r3, #4
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e012      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002228:	2308      	movs	r3, #8
 800222a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	611a      	str	r2, [r3, #16]
          break;
 8002232:	e008      	b.n	8002246 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002234:	2308      	movs	r3, #8
 8002236:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	615a      	str	r2, [r3, #20]
          break;
 800223e:	e002      	b.n	8002246 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2bff      	cmp	r3, #255	; 0xff
 800224a:	d801      	bhi.n	8002250 <HAL_GPIO_Init+0xec>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	e001      	b.n	8002254 <HAL_GPIO_Init+0xf0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2bff      	cmp	r3, #255	; 0xff
 800225a:	d802      	bhi.n	8002262 <HAL_GPIO_Init+0xfe>
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x104>
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	3b08      	subs	r3, #8
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	210f      	movs	r1, #15
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	401a      	ands	r2, r3
 800227a:	6a39      	ldr	r1, [r7, #32]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8096 	beq.w	80023c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002296:	4b59      	ldr	r3, [pc, #356]	; (80023fc <HAL_GPIO_Init+0x298>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a58      	ldr	r2, [pc, #352]	; (80023fc <HAL_GPIO_Init+0x298>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b56      	ldr	r3, [pc, #344]	; (80023fc <HAL_GPIO_Init+0x298>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022ae:	4a54      	ldr	r2, [pc, #336]	; (8002400 <HAL_GPIO_Init+0x29c>)
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4013      	ands	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x2a0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0x19e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x2a4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00d      	beq.n	80022fe <HAL_GPIO_Init+0x19a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a49      	ldr	r2, [pc, #292]	; (800240c <HAL_GPIO_Init+0x2a8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <HAL_GPIO_Init+0x196>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a48      	ldr	r2, [pc, #288]	; (8002410 <HAL_GPIO_Init+0x2ac>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_GPIO_Init+0x192>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x1a0>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e004      	b.n	8002304 <HAL_GPIO_Init+0x1a0>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_Init+0x1a0>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x1a0>
 8002302:	2300      	movs	r3, #0
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	4093      	lsls	r3, r2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002314:	493a      	ldr	r1, [pc, #232]	; (8002400 <HAL_GPIO_Init+0x29c>)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4938      	ldr	r1, [pc, #224]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
 800233a:	e006      	b.n	800234a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800233c:	4b35      	ldr	r3, [pc, #212]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	43db      	mvns	r3, r3
 8002344:	4933      	ldr	r1, [pc, #204]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002346:	4013      	ands	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	492e      	ldr	r1, [pc, #184]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	43db      	mvns	r3, r3
 800236c:	4929      	ldr	r1, [pc, #164]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 800236e:	4013      	ands	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4924      	ldr	r1, [pc, #144]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	43db      	mvns	r3, r3
 8002394:	491f      	ldr	r1, [pc, #124]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 8002396:	4013      	ands	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	491a      	ldr	r1, [pc, #104]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60cb      	str	r3, [r1, #12]
 80023b2:	e006      	b.n	80023c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	4915      	ldr	r1, [pc, #84]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80023be:	4013      	ands	r3, r2
 80023c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	3301      	adds	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f47f aed0 	bne.w	8002178 <HAL_GPIO_Init+0x14>
  }
}
 80023d8:	bf00      	nop
 80023da:	372c      	adds	r7, #44	; 0x2c
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	10210000 	.word	0x10210000
 80023e8:	10110000 	.word	0x10110000
 80023ec:	10120000 	.word	0x10120000
 80023f0:	10310000 	.word	0x10310000
 80023f4:	10320000 	.word	0x10320000
 80023f8:	10220000 	.word	0x10220000
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	40010800 	.word	0x40010800
 8002408:	40010c00 	.word	0x40010c00
 800240c:	40011000 	.word	0x40011000
 8002410:	40011400 	.word	0x40011400
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	807b      	strh	r3, [r7, #2]
 8002452:	4613      	mov	r3, r2
 8002454:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002456:	787b      	ldrb	r3, [r7, #1]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245c:	887a      	ldrh	r2, [r7, #2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002462:	e003      	b.n	800246c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	041a      	lsls	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	611a      	str	r2, [r3, #16]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
	...

08002478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e11f      	b.n	80026ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fa02 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024dc:	f001 fda4 	bl	8004028 <HAL_RCC_GetPCLK1Freq>
 80024e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a7b      	ldr	r2, [pc, #492]	; (80026d4 <HAL_I2C_Init+0x25c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d807      	bhi.n	80024fc <HAL_I2C_Init+0x84>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a7a      	ldr	r2, [pc, #488]	; (80026d8 <HAL_I2C_Init+0x260>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	bf94      	ite	ls
 80024f4:	2301      	movls	r3, #1
 80024f6:	2300      	movhi	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e006      	b.n	800250a <HAL_I2C_Init+0x92>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a77      	ldr	r2, [pc, #476]	; (80026dc <HAL_I2C_Init+0x264>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0db      	b.n	80026ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a72      	ldr	r2, [pc, #456]	; (80026e0 <HAL_I2C_Init+0x268>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a64      	ldr	r2, [pc, #400]	; (80026d4 <HAL_I2C_Init+0x25c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d802      	bhi.n	800254c <HAL_I2C_Init+0xd4>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	3301      	adds	r3, #1
 800254a:	e009      	b.n	8002560 <HAL_I2C_Init+0xe8>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	4a63      	ldr	r2, [pc, #396]	; (80026e4 <HAL_I2C_Init+0x26c>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	3301      	adds	r3, #1
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4956      	ldr	r1, [pc, #344]	; (80026d4 <HAL_I2C_Init+0x25c>)
 800257c:	428b      	cmp	r3, r1
 800257e:	d80d      	bhi.n	800259c <HAL_I2C_Init+0x124>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e59      	subs	r1, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fbb1 f3f3 	udiv	r3, r1, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	2b04      	cmp	r3, #4
 8002596:	bf38      	it	cc
 8002598:	2304      	movcc	r3, #4
 800259a:	e04f      	b.n	800263c <HAL_I2C_Init+0x1c4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d111      	bne.n	80025c8 <HAL_I2C_Init+0x150>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	e012      	b.n	80025ee <HAL_I2C_Init+0x176>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	0099      	lsls	r1, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Init+0x17e>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e022      	b.n	800263c <HAL_I2C_Init+0x1c4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <HAL_I2C_Init+0x1a4>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1e58      	subs	r0, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	440b      	add	r3, r1
 800260c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	e00f      	b.n	800263c <HAL_I2C_Init+0x1c4>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	0099      	lsls	r1, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	6809      	ldr	r1, [r1, #0]
 8002640:	4313      	orrs	r3, r2
 8002642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800266a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6911      	ldr	r1, [r2, #16]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	430b      	orrs	r3, r1
 800267e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	000186a0 	.word	0x000186a0
 80026d8:	001e847f 	.word	0x001e847f
 80026dc:	003d08ff 	.word	0x003d08ff
 80026e0:	431bde83 	.word	0x431bde83
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	461a      	mov	r2, r3
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
 80026f8:	4613      	mov	r3, r2
 80026fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff fc22 	bl	8001f44 <HAL_GetTick>
 8002700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 80e0 	bne.w	80028d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2319      	movs	r3, #25
 8002716:	2201      	movs	r2, #1
 8002718:	4970      	ldr	r1, [pc, #448]	; (80028dc <HAL_I2C_Master_Transmit+0x1f4>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fdba 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	e0d3      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2C_Master_Transmit+0x50>
 8002734:	2302      	movs	r3, #2
 8002736:	e0cc      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d007      	beq.n	800275e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2221      	movs	r2, #33	; 0x21
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2210      	movs	r2, #16
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	893a      	ldrh	r2, [r7, #8]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4a50      	ldr	r2, [pc, #320]	; (80028e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027a0:	8979      	ldrh	r1, [r7, #10]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fc24 	bl	8002ff4 <I2C_MasterRequestWrite>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e08d      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027cc:	e066      	b.n	800289c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	6a39      	ldr	r1, [r7, #32]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fe34 	bl	8003440 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d107      	bne.n	80027f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06b      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d11b      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x188>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d017      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6a39      	ldr	r1, [r7, #32]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fe24 	bl	80034c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b04      	cmp	r3, #4
 8002886:	d107      	bne.n	8002898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e01a      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d194      	bne.n	80027ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	00100002 	.word	0x00100002
 80028e0:	ffff0000 	.word	0xffff0000

080028e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	461a      	mov	r2, r3
 80028f0:	460b      	mov	r3, r1
 80028f2:	817b      	strh	r3, [r7, #10]
 80028f4:	4613      	mov	r3, r2
 80028f6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff fb22 	bl	8001f44 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b20      	cmp	r3, #32
 800290c:	f040 8238 	bne.w	8002d80 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2319      	movs	r3, #25
 8002916:	2201      	movs	r2, #1
 8002918:	497e      	ldr	r1, [pc, #504]	; (8002b14 <HAL_I2C_Master_Receive+0x230>)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fcba 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
 8002928:	e22b      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_I2C_Master_Receive+0x54>
 8002934:	2302      	movs	r3, #2
 8002936:	e224      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d007      	beq.n	800295e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0201 	orr.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2222      	movs	r2, #34	; 0x22
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2210      	movs	r2, #16
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	893a      	ldrh	r2, [r7, #8]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_I2C_Master_Receive+0x234>)
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029a0:	8979      	ldrh	r1, [r7, #10]
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fba6 	bl	80030f8 <I2C_MasterRequestRead>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e1e5      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d113      	bne.n	80029e6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e1b9      	b.n	8002d5a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d11d      	bne.n	8002a2a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029fe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a26:	b662      	cpsie	i
 8002a28:	e197      	b.n	8002d5a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d11d      	bne.n	8002a6e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a42:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a6a:	b662      	cpsie	i
 8002a6c:	e175      	b.n	8002d5a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002a94:	e161      	b.n	8002d5a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	f200 811a 	bhi.w	8002cd4 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d123      	bne.n	8002af0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fd49 	bl	8003544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e162      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aee:	e134      	b.n	8002d5a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d150      	bne.n	8002b9a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <HAL_I2C_Master_Receive+0x238>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fbc6 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e137      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
 8002b12:	bf00      	nop
 8002b14:	00100002 	.word	0x00100002
 8002b18:	ffff0000 	.word	0xffff0000
 8002b1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b30:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b64:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b98:	e0df      	b.n	8002d5a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	497a      	ldr	r1, [pc, #488]	; (8002d8c <HAL_I2C_Master_Receive+0x4a8>)
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fb75 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0e6      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bf8:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_I2C_Master_Receive+0x4ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	4a65      	ldr	r2, [pc, #404]	; (8002d94 <HAL_I2C_Master_Receive+0x4b0>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	0a1a      	lsrs	r2, r3, #8
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00da      	lsls	r2, r3, #3
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d117      	bne.n	8002c4e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c40:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e099      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d1da      	bne.n	8002c12 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c9e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd2:	e042      	b.n	8002d5a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fc33 	bl	8003544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e04c      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d118      	bne.n	8002d5a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f47f ae99 	bne.w	8002a96 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3728      	adds	r7, #40	; 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	00010004 	.word	0x00010004
 8002d90:	20000000 	.word	0x20000000
 8002d94:	14f8b589 	.word	0x14f8b589

08002d98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	460b      	mov	r3, r1
 8002da6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff f8cc 	bl	8001f44 <HAL_GetTick>
 8002dac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002dae:	2301      	movs	r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	f040 8111 	bne.w	8002fe2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2319      	movs	r3, #25
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4988      	ldr	r1, [pc, #544]	; (8002fec <HAL_I2C_IsDeviceReady+0x254>)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fa62 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e104      	b.n	8002fe4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2C_IsDeviceReady+0x50>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e0fd      	b.n	8002fe4 <HAL_I2C_IsDeviceReady+0x24c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d007      	beq.n	8002e0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2224      	movs	r2, #36	; 0x24
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a70      	ldr	r2, [pc, #448]	; (8002ff0 <HAL_I2C_IsDeviceReady+0x258>)
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fa20 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e68:	d103      	bne.n	8002e72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0b6      	b.n	8002fe4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e76:	897b      	ldrh	r3, [r7, #10]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e86:	f7ff f85d 	bl	8001f44 <HAL_GetTick>
 8002e8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	bf0c      	ite	eq
 8002eb2:	2301      	moveq	r3, #1
 8002eb4:	2300      	movne	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002eba:	e025      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ebc:	f7ff f842 	bl	8001f44 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <HAL_I2C_IsDeviceReady+0x13a>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	22a0      	movs	r2, #160	; 0xa0
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2ba0      	cmp	r3, #160	; 0xa0
 8002f12:	d005      	beq.n	8002f20 <HAL_I2C_IsDeviceReady+0x188>
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_I2C_IsDeviceReady+0x188>
 8002f1a:	7dbb      	ldrb	r3, [r7, #22]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0cd      	beq.n	8002ebc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d129      	bne.n	8002f8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2319      	movs	r3, #25
 8002f62:	2201      	movs	r2, #1
 8002f64:	4921      	ldr	r1, [pc, #132]	; (8002fec <HAL_I2C_IsDeviceReady+0x254>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f994 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e036      	b.n	8002fe4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e02c      	b.n	8002fe4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2319      	movs	r3, #25
 8002faa:	2201      	movs	r2, #1
 8002fac:	490f      	ldr	r1, [pc, #60]	; (8002fec <HAL_I2C_IsDeviceReady+0x254>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f970 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e012      	b.n	8002fe4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	f4ff af32 	bcc.w	8002e32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	00100002 	.word	0x00100002
 8002ff0:	ffff0000 	.word	0xffff0000

08002ff4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	460b      	mov	r3, r1
 8003002:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d006      	beq.n	800301e <I2C_MasterRequestWrite+0x2a>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d003      	beq.n	800301e <I2C_MasterRequestWrite+0x2a>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800301c:	d108      	bne.n	8003030 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e00b      	b.n	8003048 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	2b12      	cmp	r3, #18
 8003036:	d107      	bne.n	8003048 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003046:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f91d 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306e:	d103      	bne.n	8003078 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e035      	b.n	80030e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003084:	d108      	bne.n	8003098 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003086:	897b      	ldrh	r3, [r7, #10]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003094:	611a      	str	r2, [r3, #16]
 8003096:	e01b      	b.n	80030d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003098:	897b      	ldrh	r3, [r7, #10]
 800309a:	11db      	asrs	r3, r3, #7
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 0306 	and.w	r3, r3, #6
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f063 030f 	orn	r3, r3, #15
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	490e      	ldr	r1, [pc, #56]	; (80030f0 <I2C_MasterRequestWrite+0xfc>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f943 	bl	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e010      	b.n	80030e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4907      	ldr	r1, [pc, #28]	; (80030f4 <I2C_MasterRequestWrite+0x100>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f933 	bl	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	00010008 	.word	0x00010008
 80030f4:	00010002 	.word	0x00010002

080030f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	460b      	mov	r3, r1
 8003106:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800311c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d006      	beq.n	8003132 <I2C_MasterRequestRead+0x3a>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d003      	beq.n	8003132 <I2C_MasterRequestRead+0x3a>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003130:	d108      	bne.n	8003144 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e00b      	b.n	800315c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	2b11      	cmp	r3, #17
 800314a:	d107      	bne.n	800315c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f893 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003182:	d103      	bne.n	800318c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e079      	b.n	8003284 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003198:	d108      	bne.n	80031ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	611a      	str	r2, [r3, #16]
 80031aa:	e05f      	b.n	800326c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031ac:	897b      	ldrh	r3, [r7, #10]
 80031ae:	11db      	asrs	r3, r3, #7
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f003 0306 	and.w	r3, r3, #6
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f063 030f 	orn	r3, r3, #15
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4930      	ldr	r1, [pc, #192]	; (800328c <I2C_MasterRequestRead+0x194>)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f8b9 	bl	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e054      	b.n	8003284 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4929      	ldr	r1, [pc, #164]	; (8003290 <I2C_MasterRequestRead+0x198>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f8a9 	bl	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e044      	b.n	8003284 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f831 	bl	8003294 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d103      	bne.n	8003250 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e017      	b.n	8003284 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	11db      	asrs	r3, r3, #7
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 0306 	and.w	r3, r3, #6
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f063 030e 	orn	r3, r3, #14
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4907      	ldr	r1, [pc, #28]	; (8003290 <I2C_MasterRequestRead+0x198>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f865 	bl	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	00010008 	.word	0x00010008
 8003290:	00010002 	.word	0x00010002

08003294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a4:	e025      	b.n	80032f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d021      	beq.n	80032f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fe fe49 	bl	8001f44 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d116      	bne.n	80032f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e023      	b.n	800333a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d10d      	bne.n	8003318 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	e00c      	b.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	429a      	cmp	r2, r3
 8003336:	d0b6      	beq.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003350:	e051      	b.n	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003360:	d123      	bne.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e046      	b.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d021      	beq.n	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7fe fdc7 	bl	8001f44 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d116      	bne.n	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f043 0220 	orr.w	r2, r3, #32
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e020      	b.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10c      	bne.n	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	43da      	mvns	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e00b      	b.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	43da      	mvns	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4013      	ands	r3, r2
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d18d      	bne.n	8003352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800344c:	e02d      	b.n	80034aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f8ce 	bl	80035f0 <I2C_IsAcknowledgeFailed>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e02d      	b.n	80034ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d021      	beq.n	80034aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003466:	f7fe fd6d 	bl	8001f44 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d116      	bne.n	80034aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e007      	b.n	80034ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	d1ca      	bne.n	800344e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ce:	e02d      	b.n	800352c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f88d 	bl	80035f0 <I2C_IsAcknowledgeFailed>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e02d      	b.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d021      	beq.n	800352c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7fe fd2c 	bl	8001f44 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e007      	b.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b04      	cmp	r3, #4
 8003538:	d1ca      	bne.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003550:	e042      	b.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b10      	cmp	r3, #16
 800355e:	d119      	bne.n	8003594 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0210 	mvn.w	r2, #16
 8003568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e029      	b.n	80035e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003594:	f7fe fcd6 	bl	8001f44 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d116      	bne.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e007      	b.n	80035e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d1b5      	bne.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d11b      	bne.n	8003640 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003610:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e304      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800366c:	4b92      	ldr	r3, [pc, #584]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b04      	cmp	r3, #4
 8003676:	d00c      	beq.n	8003692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003678:	4b8f      	ldr	r3, [pc, #572]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b08      	cmp	r3, #8
 8003682:	d112      	bne.n	80036aa <HAL_RCC_OscConfig+0x5e>
 8003684:	4b8c      	ldr	r3, [pc, #560]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d10b      	bne.n	80036aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003692:	4b89      	ldr	r3, [pc, #548]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d06c      	beq.n	8003778 <HAL_RCC_OscConfig+0x12c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d168      	bne.n	8003778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e2de      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x76>
 80036b4:	4b80      	ldr	r3, [pc, #512]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7f      	ldr	r2, [pc, #508]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e02e      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x98>
 80036ca:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7a      	ldr	r2, [pc, #488]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b78      	ldr	r3, [pc, #480]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a77      	ldr	r2, [pc, #476]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0xbc>
 80036ee:	4b72      	ldr	r3, [pc, #456]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a71      	ldr	r2, [pc, #452]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6e      	ldr	r2, [pc, #440]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 8003708:	4b6b      	ldr	r3, [pc, #428]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6a      	ldr	r2, [pc, #424]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a67      	ldr	r2, [pc, #412]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe fc0c 	bl	8001f44 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe fc08 	bl	8001f44 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e292      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xe4>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe fbf8 	bl	8001f44 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe fbf4 	bl	8001f44 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e27e      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x10c>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d063      	beq.n	800384e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003786:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003792:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d11c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x18c>
 800379e:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d116      	bne.n	80037d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x176>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e252      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4939      	ldr	r1, [pc, #228]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	e03a      	b.n	800384e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fbad 	bl	8001f44 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fe fba9 	bl	8001f44 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e233      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4927      	ldr	r1, [pc, #156]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
 8003820:	e015      	b.n	800384e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe fb8c 	bl	8001f44 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003830:	f7fe fb88 	bl	8001f44 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e212      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d03a      	beq.n	80038d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d019      	beq.n	8003896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7fe fb6c 	bl	8001f44 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003870:	f7fe fb68 	bl	8001f44 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1f2      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800388e:	2001      	movs	r0, #1
 8003890:	f000 fbde 	bl	8004050 <RCC_Delay>
 8003894:	e01c      	b.n	80038d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fe fb52 	bl	8001f44 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a2:	e00f      	b.n	80038c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe fb4e 	bl	8001f44 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d908      	bls.n	80038c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1d8      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	42420000 	.word	0x42420000
 80038c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	4b9b      	ldr	r3, [pc, #620]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e9      	bne.n	80038a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a6 	beq.w	8003a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e2:	4b94      	ldr	r3, [pc, #592]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	4b91      	ldr	r3, [pc, #580]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4a90      	ldr	r2, [pc, #576]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	61d3      	str	r3, [r2, #28]
 80038fa:	4b8e      	ldr	r3, [pc, #568]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	4b8b      	ldr	r3, [pc, #556]	; (8003b38 <HAL_RCC_OscConfig+0x4ec>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d118      	bne.n	8003948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003916:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_OscConfig+0x4ec>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a87      	ldr	r2, [pc, #540]	; (8003b38 <HAL_RCC_OscConfig+0x4ec>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003922:	f7fe fb0f 	bl	8001f44 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392a:	f7fe fb0b 	bl	8001f44 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b64      	cmp	r3, #100	; 0x64
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e195      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	4b7e      	ldr	r3, [pc, #504]	; (8003b38 <HAL_RCC_OscConfig+0x4ec>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x312>
 8003950:	4b78      	ldr	r3, [pc, #480]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4a77      	ldr	r2, [pc, #476]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6213      	str	r3, [r2, #32]
 800395c:	e02d      	b.n	80039ba <HAL_RCC_OscConfig+0x36e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x334>
 8003966:	4b73      	ldr	r3, [pc, #460]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a72      	ldr	r2, [pc, #456]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6213      	str	r3, [r2, #32]
 8003972:	4b70      	ldr	r3, [pc, #448]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4a6f      	ldr	r2, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	6213      	str	r3, [r2, #32]
 800397e:	e01c      	b.n	80039ba <HAL_RCC_OscConfig+0x36e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d10c      	bne.n	80039a2 <HAL_RCC_OscConfig+0x356>
 8003988:	4b6a      	ldr	r3, [pc, #424]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4a69      	ldr	r2, [pc, #420]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 800398e:	f043 0304 	orr.w	r3, r3, #4
 8003992:	6213      	str	r3, [r2, #32]
 8003994:	4b67      	ldr	r3, [pc, #412]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4a66      	ldr	r2, [pc, #408]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6213      	str	r3, [r2, #32]
 80039a0:	e00b      	b.n	80039ba <HAL_RCC_OscConfig+0x36e>
 80039a2:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4a63      	ldr	r2, [pc, #396]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	6213      	str	r3, [r2, #32]
 80039ae:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4a60      	ldr	r2, [pc, #384]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d015      	beq.n	80039ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c2:	f7fe fabf 	bl	8001f44 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ca:	f7fe fabb 	bl	8001f44 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e143      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e0:	4b54      	ldr	r3, [pc, #336]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ee      	beq.n	80039ca <HAL_RCC_OscConfig+0x37e>
 80039ec:	e014      	b.n	8003a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7fe faa9 	bl	8001f44 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fe faa5 	bl	8001f44 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e12d      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0c:	4b49      	ldr	r3, [pc, #292]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ee      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1e:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4a44      	ldr	r2, [pc, #272]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a28:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 808c 	beq.w	8003b4c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a34:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d10e      	bne.n	8003a60 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a42:	4b3c      	ldr	r3, [pc, #240]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d108      	bne.n	8003a60 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003a4e:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e103      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d14e      	bne.n	8003b06 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003a68:	4b32      	ldr	r3, [pc, #200]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003a74:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0ef      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003a88:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <HAL_RCC_OscConfig+0x4f0>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7fe fa59 	bl	8001f44 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a96:	f7fe fa55 	bl	8001f44 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b64      	cmp	r3, #100	; 0x64
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0df      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003aa8:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003ab4:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac0:	491c      	ldr	r1, [pc, #112]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4918      	ldr	r1, [pc, #96]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003ad8:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <HAL_RCC_OscConfig+0x4f0>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fe fa31 	bl	8001f44 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ae6:	f7fe fa2d 	bl	8001f44 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	; 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0b7      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003af8:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x49a>
 8003b04:	e022      	b.n	8003b4c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <HAL_RCC_OscConfig+0x4e8>)
 8003b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_RCC_OscConfig+0x4f0>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fe fa14 	bl	8001f44 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b20:	f7fe fa10 	bl	8001f44 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	; 0x64
 8003b2c:	d908      	bls.n	8003b40 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e09a      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40007000 	.word	0x40007000
 8003b3c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b40:	4b4b      	ldr	r3, [pc, #300]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e9      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8088 	beq.w	8003c66 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b56:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d068      	beq.n	8003c34 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d14d      	bne.n	8003c06 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b42      	ldr	r3, [pc, #264]	; (8003c74 <HAL_RCC_OscConfig+0x628>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe f9e8 	bl	8001f44 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fe f9e4 	bl	8001f44 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e06e      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8a:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9e:	d10f      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003ba0:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4931      	ldr	r1, [pc, #196]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	f023 020f 	bic.w	r2, r3, #15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	492d      	ldr	r1, [pc, #180]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	4927      	ldr	r1, [pc, #156]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <HAL_RCC_OscConfig+0x628>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fe f9b1 	bl	8001f44 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fe f9ad 	bl	8001f44 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e037      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x59a>
 8003c04:	e02f      	b.n	8003c66 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x628>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f99a 	bl	8001f44 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fe f996 	bl	8001f44 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e020      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5c8>
 8003c32:	e018      	b.n	8003c66 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e013      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCC_OscConfig+0x624>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	42420060 	.word	0x42420060

08003c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0d0      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d910      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0207 	bic.w	r2, r3, #7
 8003ca2:	4965      	ldr	r1, [pc, #404]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b63      	ldr	r3, [pc, #396]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0b8      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	494d      	ldr	r1, [pc, #308]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d040      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d115      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e07f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e073      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e06b      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4936      	ldr	r1, [pc, #216]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fe f8ec 	bl	8001f44 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fe f8e8 	bl	8001f44 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e053      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d210      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	4922      	ldr	r1, [pc, #136]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e032      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4916      	ldr	r1, [pc, #88]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	490e      	ldr	r1, [pc, #56]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e06:	f000 f821 	bl	8003e4c <HAL_RCC_GetSysClockFreq>
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <HAL_RCC_ClockConfig+0x1c8>)
 8003e18:	5cd3      	ldrb	r3, [r2, r3]
 8003e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1cc>)
 8003e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1d0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe f84a 	bl	8001ec0 <HAL_InitTick>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40022000 	.word	0x40022000
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	08004ac8 	.word	0x08004ac8
 8003e44:	20000000 	.word	0x20000000
 8003e48:	20000004 	.word	0x20000004

08003e4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e50:	b091      	sub	sp, #68	; 0x44
 8003e52:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003e54:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8003e56:	f107 0414 	add.w	r4, r7, #20
 8003e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5c:	c407      	stmia	r4!, {r0, r1, r2}
 8003e5e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003e60:	4b68      	ldr	r3, [pc, #416]	; (8004004 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e62:	1d3c      	adds	r4, r7, #4
 8003e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6e:	2300      	movs	r3, #0
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
 8003e72:	2300      	movs	r3, #0
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e86:	4b60      	ldr	r3, [pc, #384]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d002      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x50>
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x56>
 8003e9a:	e0a7      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e9c:	4b5b      	ldr	r3, [pc, #364]	; (800400c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ea0:	e0a7      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea4:	0c9b      	lsrs	r3, r3, #18
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003eae:	4413      	add	r3, r2
 8003eb0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 808d 	beq.w	8003fdc <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003ec2:	4b51      	ldr	r3, [pc, #324]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003ece:	4413      	add	r3, r2
 8003ed0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003ed6:	4b4c      	ldr	r3, [pc, #304]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d06a      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003ee2:	4b49      	ldr	r3, [pc, #292]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	3301      	adds	r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003ef0:	4b45      	ldr	r3, [pc, #276]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3302      	adds	r3, #2
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	4619      	mov	r1, r3
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	f04f 0400 	mov.w	r4, #0
 8003f0c:	fb03 f502 	mul.w	r5, r3, r2
 8003f10:	fb01 f004 	mul.w	r0, r1, r4
 8003f14:	4428      	add	r0, r5
 8003f16:	fba1 5603 	umull	r5, r6, r1, r3
 8003f1a:	1983      	adds	r3, r0, r6
 8003f1c:	461e      	mov	r6, r3
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4632      	mov	r2, r6
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	f04f 0400 	mov.w	r4, #0
 8003f2a:	0154      	lsls	r4, r2, #5
 8003f2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f30:	014b      	lsls	r3, r1, #5
 8003f32:	4619      	mov	r1, r3
 8003f34:	4622      	mov	r2, r4
 8003f36:	1b49      	subs	r1, r1, r5
 8003f38:	eb62 0206 	sbc.w	r2, r2, r6
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	f04f 0400 	mov.w	r4, #0
 8003f44:	0194      	lsls	r4, r2, #6
 8003f46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f4a:	018b      	lsls	r3, r1, #6
 8003f4c:	1a5b      	subs	r3, r3, r1
 8003f4e:	eb64 0402 	sbc.w	r4, r4, r2
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f60:	00d9      	lsls	r1, r3, #3
 8003f62:	460b      	mov	r3, r1
 8003f64:	4614      	mov	r4, r2
 8003f66:	195b      	adds	r3, r3, r5
 8003f68:	eb44 0406 	adc.w	r4, r4, r6
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	0262      	lsls	r2, r4, #9
 8003f76:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f7a:	0259      	lsls	r1, r3, #9
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4614      	mov	r4, r2
 8003f80:	4698      	mov	r8, r3
 8003f82:	46a1      	mov	r9, r4
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	4619      	mov	r1, r3
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	f04f 0400 	mov.w	r4, #0
 8003f92:	fb03 f502 	mul.w	r5, r3, r2
 8003f96:	fb01 f004 	mul.w	r0, r1, r4
 8003f9a:	4428      	add	r0, r5
 8003f9c:	fba1 3403 	umull	r3, r4, r1, r3
 8003fa0:	1902      	adds	r2, r0, r4
 8003fa2:	4614      	mov	r4, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	4640      	mov	r0, r8
 8003faa:	4649      	mov	r1, r9
 8003fac:	f7fc f942 	bl	8000234 <__aeabi_uldivmod>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb6:	e007      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fbc:	fb02 f203 	mul.w	r2, r2, r3
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003fc8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d108      	bne.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8003fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fda:	e004      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8003fe0:	fb02 f303 	mul.w	r3, r2, r3
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fea:	e002      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3744      	adds	r7, #68	; 0x44
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ffe:	bf00      	nop
 8004000:	08004aa4 	.word	0x08004aa4
 8004004:	08004ab4 	.word	0x08004ab4
 8004008:	40021000 	.word	0x40021000
 800400c:	007a1200 	.word	0x007a1200
 8004010:	003d0900 	.word	0x003d0900

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b02      	ldr	r3, [pc, #8]	; (8004024 <HAL_RCC_GetHCLKFreq+0x10>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	20000000 	.word	0x20000000

08004028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800402c:	f7ff fff2 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004030:	4601      	mov	r1, r0
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4a03      	ldr	r2, [pc, #12]	; (800404c <HAL_RCC_GetPCLK1Freq+0x24>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	08004ad8 	.word	0x08004ad8

08004050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <RCC_Delay+0x34>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <RCC_Delay+0x38>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	0a5b      	lsrs	r3, r3, #9
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800406c:	bf00      	nop
  }
  while (Delay --);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1e5a      	subs	r2, r3, #1
 8004072:	60fa      	str	r2, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f9      	bne.n	800406c <RCC_Delay+0x1c>
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000000 	.word	0x20000000
 8004088:	10624dd3 	.word	0x10624dd3

0800408c <__errno>:
 800408c:	4b01      	ldr	r3, [pc, #4]	; (8004094 <__errno+0x8>)
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000000c 	.word	0x2000000c

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	2500      	movs	r5, #0
 800409c:	4e0c      	ldr	r6, [pc, #48]	; (80040d0 <__libc_init_array+0x38>)
 800409e:	4c0d      	ldr	r4, [pc, #52]	; (80040d4 <__libc_init_array+0x3c>)
 80040a0:	1ba4      	subs	r4, r4, r6
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	42a5      	cmp	r5, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	f000 fc34 	bl	8004914 <_init>
 80040ac:	2500      	movs	r5, #0
 80040ae:	4e0a      	ldr	r6, [pc, #40]	; (80040d8 <__libc_init_array+0x40>)
 80040b0:	4c0a      	ldr	r4, [pc, #40]	; (80040dc <__libc_init_array+0x44>)
 80040b2:	1ba4      	subs	r4, r4, r6
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	42a5      	cmp	r5, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040c0:	4798      	blx	r3
 80040c2:	3501      	adds	r5, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ca:	4798      	blx	r3
 80040cc:	3501      	adds	r5, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	08004b1c 	.word	0x08004b1c
 80040d4:	08004b1c 	.word	0x08004b1c
 80040d8:	08004b1c 	.word	0x08004b1c
 80040dc:	08004b20 	.word	0x08004b20

080040e0 <memset>:
 80040e0:	4603      	mov	r3, r0
 80040e2:	4402      	add	r2, r0
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	f803 1b01 	strb.w	r1, [r3], #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <siprintf>:
 80040f0:	b40e      	push	{r1, r2, r3}
 80040f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040f6:	b500      	push	{lr}
 80040f8:	b09c      	sub	sp, #112	; 0x70
 80040fa:	ab1d      	add	r3, sp, #116	; 0x74
 80040fc:	9002      	str	r0, [sp, #8]
 80040fe:	9006      	str	r0, [sp, #24]
 8004100:	9107      	str	r1, [sp, #28]
 8004102:	9104      	str	r1, [sp, #16]
 8004104:	4808      	ldr	r0, [pc, #32]	; (8004128 <siprintf+0x38>)
 8004106:	4909      	ldr	r1, [pc, #36]	; (800412c <siprintf+0x3c>)
 8004108:	f853 2b04 	ldr.w	r2, [r3], #4
 800410c:	9105      	str	r1, [sp, #20]
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	a902      	add	r1, sp, #8
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	f000 f866 	bl	80041e4 <_svfiprintf_r>
 8004118:	2200      	movs	r2, #0
 800411a:	9b02      	ldr	r3, [sp, #8]
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	b01c      	add	sp, #112	; 0x70
 8004120:	f85d eb04 	ldr.w	lr, [sp], #4
 8004124:	b003      	add	sp, #12
 8004126:	4770      	bx	lr
 8004128:	2000000c 	.word	0x2000000c
 800412c:	ffff0208 	.word	0xffff0208

08004130 <__ssputs_r>:
 8004130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004134:	688e      	ldr	r6, [r1, #8]
 8004136:	4682      	mov	sl, r0
 8004138:	429e      	cmp	r6, r3
 800413a:	460c      	mov	r4, r1
 800413c:	4690      	mov	r8, r2
 800413e:	4699      	mov	r9, r3
 8004140:	d837      	bhi.n	80041b2 <__ssputs_r+0x82>
 8004142:	898a      	ldrh	r2, [r1, #12]
 8004144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004148:	d031      	beq.n	80041ae <__ssputs_r+0x7e>
 800414a:	2302      	movs	r3, #2
 800414c:	6825      	ldr	r5, [r4, #0]
 800414e:	6909      	ldr	r1, [r1, #16]
 8004150:	1a6f      	subs	r7, r5, r1
 8004152:	6965      	ldr	r5, [r4, #20]
 8004154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004158:	fb95 f5f3 	sdiv	r5, r5, r3
 800415c:	f109 0301 	add.w	r3, r9, #1
 8004160:	443b      	add	r3, r7
 8004162:	429d      	cmp	r5, r3
 8004164:	bf38      	it	cc
 8004166:	461d      	movcc	r5, r3
 8004168:	0553      	lsls	r3, r2, #21
 800416a:	d530      	bpl.n	80041ce <__ssputs_r+0x9e>
 800416c:	4629      	mov	r1, r5
 800416e:	f000 fb37 	bl	80047e0 <_malloc_r>
 8004172:	4606      	mov	r6, r0
 8004174:	b950      	cbnz	r0, 800418c <__ssputs_r+0x5c>
 8004176:	230c      	movs	r3, #12
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	f8ca 3000 	str.w	r3, [sl]
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418c:	463a      	mov	r2, r7
 800418e:	6921      	ldr	r1, [r4, #16]
 8004190:	f000 fab6 	bl	8004700 <memcpy>
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800419a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419e:	81a3      	strh	r3, [r4, #12]
 80041a0:	6126      	str	r6, [r4, #16]
 80041a2:	443e      	add	r6, r7
 80041a4:	6026      	str	r6, [r4, #0]
 80041a6:	464e      	mov	r6, r9
 80041a8:	6165      	str	r5, [r4, #20]
 80041aa:	1bed      	subs	r5, r5, r7
 80041ac:	60a5      	str	r5, [r4, #8]
 80041ae:	454e      	cmp	r6, r9
 80041b0:	d900      	bls.n	80041b4 <__ssputs_r+0x84>
 80041b2:	464e      	mov	r6, r9
 80041b4:	4632      	mov	r2, r6
 80041b6:	4641      	mov	r1, r8
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	f000 faac 	bl	8004716 <memmove>
 80041be:	68a3      	ldr	r3, [r4, #8]
 80041c0:	2000      	movs	r0, #0
 80041c2:	1b9b      	subs	r3, r3, r6
 80041c4:	60a3      	str	r3, [r4, #8]
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	441e      	add	r6, r3
 80041ca:	6026      	str	r6, [r4, #0]
 80041cc:	e7dc      	b.n	8004188 <__ssputs_r+0x58>
 80041ce:	462a      	mov	r2, r5
 80041d0:	f000 fb60 	bl	8004894 <_realloc_r>
 80041d4:	4606      	mov	r6, r0
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d1e2      	bne.n	80041a0 <__ssputs_r+0x70>
 80041da:	6921      	ldr	r1, [r4, #16]
 80041dc:	4650      	mov	r0, sl
 80041de:	f000 fab3 	bl	8004748 <_free_r>
 80041e2:	e7c8      	b.n	8004176 <__ssputs_r+0x46>

080041e4 <_svfiprintf_r>:
 80041e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	461d      	mov	r5, r3
 80041ea:	898b      	ldrh	r3, [r1, #12]
 80041ec:	b09d      	sub	sp, #116	; 0x74
 80041ee:	061f      	lsls	r7, r3, #24
 80041f0:	4680      	mov	r8, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	4616      	mov	r6, r2
 80041f6:	d50f      	bpl.n	8004218 <_svfiprintf_r+0x34>
 80041f8:	690b      	ldr	r3, [r1, #16]
 80041fa:	b96b      	cbnz	r3, 8004218 <_svfiprintf_r+0x34>
 80041fc:	2140      	movs	r1, #64	; 0x40
 80041fe:	f000 faef 	bl	80047e0 <_malloc_r>
 8004202:	6020      	str	r0, [r4, #0]
 8004204:	6120      	str	r0, [r4, #16]
 8004206:	b928      	cbnz	r0, 8004214 <_svfiprintf_r+0x30>
 8004208:	230c      	movs	r3, #12
 800420a:	f8c8 3000 	str.w	r3, [r8]
 800420e:	f04f 30ff 	mov.w	r0, #4294967295
 8004212:	e0c8      	b.n	80043a6 <_svfiprintf_r+0x1c2>
 8004214:	2340      	movs	r3, #64	; 0x40
 8004216:	6163      	str	r3, [r4, #20]
 8004218:	2300      	movs	r3, #0
 800421a:	9309      	str	r3, [sp, #36]	; 0x24
 800421c:	2320      	movs	r3, #32
 800421e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004222:	2330      	movs	r3, #48	; 0x30
 8004224:	f04f 0b01 	mov.w	fp, #1
 8004228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800422c:	9503      	str	r5, [sp, #12]
 800422e:	4637      	mov	r7, r6
 8004230:	463d      	mov	r5, r7
 8004232:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004236:	b10b      	cbz	r3, 800423c <_svfiprintf_r+0x58>
 8004238:	2b25      	cmp	r3, #37	; 0x25
 800423a:	d13e      	bne.n	80042ba <_svfiprintf_r+0xd6>
 800423c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004240:	d00b      	beq.n	800425a <_svfiprintf_r+0x76>
 8004242:	4653      	mov	r3, sl
 8004244:	4632      	mov	r2, r6
 8004246:	4621      	mov	r1, r4
 8004248:	4640      	mov	r0, r8
 800424a:	f7ff ff71 	bl	8004130 <__ssputs_r>
 800424e:	3001      	adds	r0, #1
 8004250:	f000 80a4 	beq.w	800439c <_svfiprintf_r+0x1b8>
 8004254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004256:	4453      	add	r3, sl
 8004258:	9309      	str	r3, [sp, #36]	; 0x24
 800425a:	783b      	ldrb	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 809d 	beq.w	800439c <_svfiprintf_r+0x1b8>
 8004262:	2300      	movs	r3, #0
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800426c:	9304      	str	r3, [sp, #16]
 800426e:	9307      	str	r3, [sp, #28]
 8004270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004274:	931a      	str	r3, [sp, #104]	; 0x68
 8004276:	462f      	mov	r7, r5
 8004278:	2205      	movs	r2, #5
 800427a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800427e:	4850      	ldr	r0, [pc, #320]	; (80043c0 <_svfiprintf_r+0x1dc>)
 8004280:	f000 fa30 	bl	80046e4 <memchr>
 8004284:	9b04      	ldr	r3, [sp, #16]
 8004286:	b9d0      	cbnz	r0, 80042be <_svfiprintf_r+0xda>
 8004288:	06d9      	lsls	r1, r3, #27
 800428a:	bf44      	itt	mi
 800428c:	2220      	movmi	r2, #32
 800428e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004292:	071a      	lsls	r2, r3, #28
 8004294:	bf44      	itt	mi
 8004296:	222b      	movmi	r2, #43	; 0x2b
 8004298:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800429c:	782a      	ldrb	r2, [r5, #0]
 800429e:	2a2a      	cmp	r2, #42	; 0x2a
 80042a0:	d015      	beq.n	80042ce <_svfiprintf_r+0xea>
 80042a2:	462f      	mov	r7, r5
 80042a4:	2000      	movs	r0, #0
 80042a6:	250a      	movs	r5, #10
 80042a8:	9a07      	ldr	r2, [sp, #28]
 80042aa:	4639      	mov	r1, r7
 80042ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042b0:	3b30      	subs	r3, #48	; 0x30
 80042b2:	2b09      	cmp	r3, #9
 80042b4:	d94d      	bls.n	8004352 <_svfiprintf_r+0x16e>
 80042b6:	b1b8      	cbz	r0, 80042e8 <_svfiprintf_r+0x104>
 80042b8:	e00f      	b.n	80042da <_svfiprintf_r+0xf6>
 80042ba:	462f      	mov	r7, r5
 80042bc:	e7b8      	b.n	8004230 <_svfiprintf_r+0x4c>
 80042be:	4a40      	ldr	r2, [pc, #256]	; (80043c0 <_svfiprintf_r+0x1dc>)
 80042c0:	463d      	mov	r5, r7
 80042c2:	1a80      	subs	r0, r0, r2
 80042c4:	fa0b f000 	lsl.w	r0, fp, r0
 80042c8:	4318      	orrs	r0, r3
 80042ca:	9004      	str	r0, [sp, #16]
 80042cc:	e7d3      	b.n	8004276 <_svfiprintf_r+0x92>
 80042ce:	9a03      	ldr	r2, [sp, #12]
 80042d0:	1d11      	adds	r1, r2, #4
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	9103      	str	r1, [sp, #12]
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	db01      	blt.n	80042de <_svfiprintf_r+0xfa>
 80042da:	9207      	str	r2, [sp, #28]
 80042dc:	e004      	b.n	80042e8 <_svfiprintf_r+0x104>
 80042de:	4252      	negs	r2, r2
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	9207      	str	r2, [sp, #28]
 80042e6:	9304      	str	r3, [sp, #16]
 80042e8:	783b      	ldrb	r3, [r7, #0]
 80042ea:	2b2e      	cmp	r3, #46	; 0x2e
 80042ec:	d10c      	bne.n	8004308 <_svfiprintf_r+0x124>
 80042ee:	787b      	ldrb	r3, [r7, #1]
 80042f0:	2b2a      	cmp	r3, #42	; 0x2a
 80042f2:	d133      	bne.n	800435c <_svfiprintf_r+0x178>
 80042f4:	9b03      	ldr	r3, [sp, #12]
 80042f6:	3702      	adds	r7, #2
 80042f8:	1d1a      	adds	r2, r3, #4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	9203      	str	r2, [sp, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfb8      	it	lt
 8004302:	f04f 33ff 	movlt.w	r3, #4294967295
 8004306:	9305      	str	r3, [sp, #20]
 8004308:	4d2e      	ldr	r5, [pc, #184]	; (80043c4 <_svfiprintf_r+0x1e0>)
 800430a:	2203      	movs	r2, #3
 800430c:	7839      	ldrb	r1, [r7, #0]
 800430e:	4628      	mov	r0, r5
 8004310:	f000 f9e8 	bl	80046e4 <memchr>
 8004314:	b138      	cbz	r0, 8004326 <_svfiprintf_r+0x142>
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	1b40      	subs	r0, r0, r5
 800431a:	fa03 f000 	lsl.w	r0, r3, r0
 800431e:	9b04      	ldr	r3, [sp, #16]
 8004320:	3701      	adds	r7, #1
 8004322:	4303      	orrs	r3, r0
 8004324:	9304      	str	r3, [sp, #16]
 8004326:	7839      	ldrb	r1, [r7, #0]
 8004328:	2206      	movs	r2, #6
 800432a:	4827      	ldr	r0, [pc, #156]	; (80043c8 <_svfiprintf_r+0x1e4>)
 800432c:	1c7e      	adds	r6, r7, #1
 800432e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004332:	f000 f9d7 	bl	80046e4 <memchr>
 8004336:	2800      	cmp	r0, #0
 8004338:	d038      	beq.n	80043ac <_svfiprintf_r+0x1c8>
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <_svfiprintf_r+0x1e8>)
 800433c:	bb13      	cbnz	r3, 8004384 <_svfiprintf_r+0x1a0>
 800433e:	9b03      	ldr	r3, [sp, #12]
 8004340:	3307      	adds	r3, #7
 8004342:	f023 0307 	bic.w	r3, r3, #7
 8004346:	3308      	adds	r3, #8
 8004348:	9303      	str	r3, [sp, #12]
 800434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800434c:	444b      	add	r3, r9
 800434e:	9309      	str	r3, [sp, #36]	; 0x24
 8004350:	e76d      	b.n	800422e <_svfiprintf_r+0x4a>
 8004352:	fb05 3202 	mla	r2, r5, r2, r3
 8004356:	2001      	movs	r0, #1
 8004358:	460f      	mov	r7, r1
 800435a:	e7a6      	b.n	80042aa <_svfiprintf_r+0xc6>
 800435c:	2300      	movs	r3, #0
 800435e:	250a      	movs	r5, #10
 8004360:	4619      	mov	r1, r3
 8004362:	3701      	adds	r7, #1
 8004364:	9305      	str	r3, [sp, #20]
 8004366:	4638      	mov	r0, r7
 8004368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800436c:	3a30      	subs	r2, #48	; 0x30
 800436e:	2a09      	cmp	r2, #9
 8004370:	d903      	bls.n	800437a <_svfiprintf_r+0x196>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0c8      	beq.n	8004308 <_svfiprintf_r+0x124>
 8004376:	9105      	str	r1, [sp, #20]
 8004378:	e7c6      	b.n	8004308 <_svfiprintf_r+0x124>
 800437a:	fb05 2101 	mla	r1, r5, r1, r2
 800437e:	2301      	movs	r3, #1
 8004380:	4607      	mov	r7, r0
 8004382:	e7f0      	b.n	8004366 <_svfiprintf_r+0x182>
 8004384:	ab03      	add	r3, sp, #12
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	4622      	mov	r2, r4
 800438a:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <_svfiprintf_r+0x1ec>)
 800438c:	a904      	add	r1, sp, #16
 800438e:	4640      	mov	r0, r8
 8004390:	f3af 8000 	nop.w
 8004394:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004398:	4681      	mov	r9, r0
 800439a:	d1d6      	bne.n	800434a <_svfiprintf_r+0x166>
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	065b      	lsls	r3, r3, #25
 80043a0:	f53f af35 	bmi.w	800420e <_svfiprintf_r+0x2a>
 80043a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043a6:	b01d      	add	sp, #116	; 0x74
 80043a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ac:	ab03      	add	r3, sp, #12
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	4622      	mov	r2, r4
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <_svfiprintf_r+0x1ec>)
 80043b4:	a904      	add	r1, sp, #16
 80043b6:	4640      	mov	r0, r8
 80043b8:	f000 f882 	bl	80044c0 <_printf_i>
 80043bc:	e7ea      	b.n	8004394 <_svfiprintf_r+0x1b0>
 80043be:	bf00      	nop
 80043c0:	08004ae0 	.word	0x08004ae0
 80043c4:	08004ae6 	.word	0x08004ae6
 80043c8:	08004aea 	.word	0x08004aea
 80043cc:	00000000 	.word	0x00000000
 80043d0:	08004131 	.word	0x08004131

080043d4 <_printf_common>:
 80043d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d8:	4691      	mov	r9, r2
 80043da:	461f      	mov	r7, r3
 80043dc:	688a      	ldr	r2, [r1, #8]
 80043de:	690b      	ldr	r3, [r1, #16]
 80043e0:	4606      	mov	r6, r0
 80043e2:	4293      	cmp	r3, r2
 80043e4:	bfb8      	it	lt
 80043e6:	4613      	movlt	r3, r2
 80043e8:	f8c9 3000 	str.w	r3, [r9]
 80043ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f0:	460c      	mov	r4, r1
 80043f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043f6:	b112      	cbz	r2, 80043fe <_printf_common+0x2a>
 80043f8:	3301      	adds	r3, #1
 80043fa:	f8c9 3000 	str.w	r3, [r9]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	0699      	lsls	r1, r3, #26
 8004402:	bf42      	ittt	mi
 8004404:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004408:	3302      	addmi	r3, #2
 800440a:	f8c9 3000 	strmi.w	r3, [r9]
 800440e:	6825      	ldr	r5, [r4, #0]
 8004410:	f015 0506 	ands.w	r5, r5, #6
 8004414:	d107      	bne.n	8004426 <_printf_common+0x52>
 8004416:	f104 0a19 	add.w	sl, r4, #25
 800441a:	68e3      	ldr	r3, [r4, #12]
 800441c:	f8d9 2000 	ldr.w	r2, [r9]
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	42ab      	cmp	r3, r5
 8004424:	dc29      	bgt.n	800447a <_printf_common+0xa6>
 8004426:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	3300      	adds	r3, #0
 800442e:	bf18      	it	ne
 8004430:	2301      	movne	r3, #1
 8004432:	0692      	lsls	r2, r2, #26
 8004434:	d42e      	bmi.n	8004494 <_printf_common+0xc0>
 8004436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800443a:	4639      	mov	r1, r7
 800443c:	4630      	mov	r0, r6
 800443e:	47c0      	blx	r8
 8004440:	3001      	adds	r0, #1
 8004442:	d021      	beq.n	8004488 <_printf_common+0xb4>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	68e5      	ldr	r5, [r4, #12]
 8004448:	f003 0306 	and.w	r3, r3, #6
 800444c:	2b04      	cmp	r3, #4
 800444e:	bf18      	it	ne
 8004450:	2500      	movne	r5, #0
 8004452:	f8d9 2000 	ldr.w	r2, [r9]
 8004456:	f04f 0900 	mov.w	r9, #0
 800445a:	bf08      	it	eq
 800445c:	1aad      	subeq	r5, r5, r2
 800445e:	68a3      	ldr	r3, [r4, #8]
 8004460:	6922      	ldr	r2, [r4, #16]
 8004462:	bf08      	it	eq
 8004464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004468:	4293      	cmp	r3, r2
 800446a:	bfc4      	itt	gt
 800446c:	1a9b      	subgt	r3, r3, r2
 800446e:	18ed      	addgt	r5, r5, r3
 8004470:	341a      	adds	r4, #26
 8004472:	454d      	cmp	r5, r9
 8004474:	d11a      	bne.n	80044ac <_printf_common+0xd8>
 8004476:	2000      	movs	r0, #0
 8004478:	e008      	b.n	800448c <_printf_common+0xb8>
 800447a:	2301      	movs	r3, #1
 800447c:	4652      	mov	r2, sl
 800447e:	4639      	mov	r1, r7
 8004480:	4630      	mov	r0, r6
 8004482:	47c0      	blx	r8
 8004484:	3001      	adds	r0, #1
 8004486:	d103      	bne.n	8004490 <_printf_common+0xbc>
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004490:	3501      	adds	r5, #1
 8004492:	e7c2      	b.n	800441a <_printf_common+0x46>
 8004494:	2030      	movs	r0, #48	; 0x30
 8004496:	18e1      	adds	r1, r4, r3
 8004498:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044a2:	4422      	add	r2, r4
 80044a4:	3302      	adds	r3, #2
 80044a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044aa:	e7c4      	b.n	8004436 <_printf_common+0x62>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4622      	mov	r2, r4
 80044b0:	4639      	mov	r1, r7
 80044b2:	4630      	mov	r0, r6
 80044b4:	47c0      	blx	r8
 80044b6:	3001      	adds	r0, #1
 80044b8:	d0e6      	beq.n	8004488 <_printf_common+0xb4>
 80044ba:	f109 0901 	add.w	r9, r9, #1
 80044be:	e7d8      	b.n	8004472 <_printf_common+0x9e>

080044c0 <_printf_i>:
 80044c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044c8:	460c      	mov	r4, r1
 80044ca:	7e09      	ldrb	r1, [r1, #24]
 80044cc:	b085      	sub	sp, #20
 80044ce:	296e      	cmp	r1, #110	; 0x6e
 80044d0:	4617      	mov	r7, r2
 80044d2:	4606      	mov	r6, r0
 80044d4:	4698      	mov	r8, r3
 80044d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044d8:	f000 80b3 	beq.w	8004642 <_printf_i+0x182>
 80044dc:	d822      	bhi.n	8004524 <_printf_i+0x64>
 80044de:	2963      	cmp	r1, #99	; 0x63
 80044e0:	d036      	beq.n	8004550 <_printf_i+0x90>
 80044e2:	d80a      	bhi.n	80044fa <_printf_i+0x3a>
 80044e4:	2900      	cmp	r1, #0
 80044e6:	f000 80b9 	beq.w	800465c <_printf_i+0x19c>
 80044ea:	2958      	cmp	r1, #88	; 0x58
 80044ec:	f000 8083 	beq.w	80045f6 <_printf_i+0x136>
 80044f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044f8:	e032      	b.n	8004560 <_printf_i+0xa0>
 80044fa:	2964      	cmp	r1, #100	; 0x64
 80044fc:	d001      	beq.n	8004502 <_printf_i+0x42>
 80044fe:	2969      	cmp	r1, #105	; 0x69
 8004500:	d1f6      	bne.n	80044f0 <_printf_i+0x30>
 8004502:	6820      	ldr	r0, [r4, #0]
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	0605      	lsls	r5, r0, #24
 8004508:	f103 0104 	add.w	r1, r3, #4
 800450c:	d52a      	bpl.n	8004564 <_printf_i+0xa4>
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6011      	str	r1, [r2, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	da03      	bge.n	800451e <_printf_i+0x5e>
 8004516:	222d      	movs	r2, #45	; 0x2d
 8004518:	425b      	negs	r3, r3
 800451a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800451e:	486f      	ldr	r0, [pc, #444]	; (80046dc <_printf_i+0x21c>)
 8004520:	220a      	movs	r2, #10
 8004522:	e039      	b.n	8004598 <_printf_i+0xd8>
 8004524:	2973      	cmp	r1, #115	; 0x73
 8004526:	f000 809d 	beq.w	8004664 <_printf_i+0x1a4>
 800452a:	d808      	bhi.n	800453e <_printf_i+0x7e>
 800452c:	296f      	cmp	r1, #111	; 0x6f
 800452e:	d020      	beq.n	8004572 <_printf_i+0xb2>
 8004530:	2970      	cmp	r1, #112	; 0x70
 8004532:	d1dd      	bne.n	80044f0 <_printf_i+0x30>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f043 0320 	orr.w	r3, r3, #32
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	e003      	b.n	8004546 <_printf_i+0x86>
 800453e:	2975      	cmp	r1, #117	; 0x75
 8004540:	d017      	beq.n	8004572 <_printf_i+0xb2>
 8004542:	2978      	cmp	r1, #120	; 0x78
 8004544:	d1d4      	bne.n	80044f0 <_printf_i+0x30>
 8004546:	2378      	movs	r3, #120	; 0x78
 8004548:	4865      	ldr	r0, [pc, #404]	; (80046e0 <_printf_i+0x220>)
 800454a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800454e:	e055      	b.n	80045fc <_printf_i+0x13c>
 8004550:	6813      	ldr	r3, [r2, #0]
 8004552:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004556:	1d19      	adds	r1, r3, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6011      	str	r1, [r2, #0]
 800455c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004560:	2301      	movs	r3, #1
 8004562:	e08c      	b.n	800467e <_printf_i+0x1be>
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f010 0f40 	tst.w	r0, #64	; 0x40
 800456a:	6011      	str	r1, [r2, #0]
 800456c:	bf18      	it	ne
 800456e:	b21b      	sxthne	r3, r3
 8004570:	e7cf      	b.n	8004512 <_printf_i+0x52>
 8004572:	6813      	ldr	r3, [r2, #0]
 8004574:	6825      	ldr	r5, [r4, #0]
 8004576:	1d18      	adds	r0, r3, #4
 8004578:	6010      	str	r0, [r2, #0]
 800457a:	0628      	lsls	r0, r5, #24
 800457c:	d501      	bpl.n	8004582 <_printf_i+0xc2>
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	e002      	b.n	8004588 <_printf_i+0xc8>
 8004582:	0668      	lsls	r0, r5, #25
 8004584:	d5fb      	bpl.n	800457e <_printf_i+0xbe>
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	296f      	cmp	r1, #111	; 0x6f
 800458a:	bf14      	ite	ne
 800458c:	220a      	movne	r2, #10
 800458e:	2208      	moveq	r2, #8
 8004590:	4852      	ldr	r0, [pc, #328]	; (80046dc <_printf_i+0x21c>)
 8004592:	2100      	movs	r1, #0
 8004594:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004598:	6865      	ldr	r5, [r4, #4]
 800459a:	2d00      	cmp	r5, #0
 800459c:	60a5      	str	r5, [r4, #8]
 800459e:	f2c0 8095 	blt.w	80046cc <_printf_i+0x20c>
 80045a2:	6821      	ldr	r1, [r4, #0]
 80045a4:	f021 0104 	bic.w	r1, r1, #4
 80045a8:	6021      	str	r1, [r4, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d13d      	bne.n	800462a <_printf_i+0x16a>
 80045ae:	2d00      	cmp	r5, #0
 80045b0:	f040 808e 	bne.w	80046d0 <_printf_i+0x210>
 80045b4:	4665      	mov	r5, ip
 80045b6:	2a08      	cmp	r2, #8
 80045b8:	d10b      	bne.n	80045d2 <_printf_i+0x112>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	07db      	lsls	r3, r3, #31
 80045be:	d508      	bpl.n	80045d2 <_printf_i+0x112>
 80045c0:	6923      	ldr	r3, [r4, #16]
 80045c2:	6862      	ldr	r2, [r4, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	bfde      	ittt	le
 80045c8:	2330      	movle	r3, #48	; 0x30
 80045ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045d2:	ebac 0305 	sub.w	r3, ip, r5
 80045d6:	6123      	str	r3, [r4, #16]
 80045d8:	f8cd 8000 	str.w	r8, [sp]
 80045dc:	463b      	mov	r3, r7
 80045de:	aa03      	add	r2, sp, #12
 80045e0:	4621      	mov	r1, r4
 80045e2:	4630      	mov	r0, r6
 80045e4:	f7ff fef6 	bl	80043d4 <_printf_common>
 80045e8:	3001      	adds	r0, #1
 80045ea:	d14d      	bne.n	8004688 <_printf_i+0x1c8>
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	b005      	add	sp, #20
 80045f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045f6:	4839      	ldr	r0, [pc, #228]	; (80046dc <_printf_i+0x21c>)
 80045f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80045fc:	6813      	ldr	r3, [r2, #0]
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	1d1d      	adds	r5, r3, #4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6015      	str	r5, [r2, #0]
 8004606:	060a      	lsls	r2, r1, #24
 8004608:	d50b      	bpl.n	8004622 <_printf_i+0x162>
 800460a:	07ca      	lsls	r2, r1, #31
 800460c:	bf44      	itt	mi
 800460e:	f041 0120 	orrmi.w	r1, r1, #32
 8004612:	6021      	strmi	r1, [r4, #0]
 8004614:	b91b      	cbnz	r3, 800461e <_printf_i+0x15e>
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	f022 0220 	bic.w	r2, r2, #32
 800461c:	6022      	str	r2, [r4, #0]
 800461e:	2210      	movs	r2, #16
 8004620:	e7b7      	b.n	8004592 <_printf_i+0xd2>
 8004622:	064d      	lsls	r5, r1, #25
 8004624:	bf48      	it	mi
 8004626:	b29b      	uxthmi	r3, r3
 8004628:	e7ef      	b.n	800460a <_printf_i+0x14a>
 800462a:	4665      	mov	r5, ip
 800462c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004630:	fb02 3311 	mls	r3, r2, r1, r3
 8004634:	5cc3      	ldrb	r3, [r0, r3]
 8004636:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800463a:	460b      	mov	r3, r1
 800463c:	2900      	cmp	r1, #0
 800463e:	d1f5      	bne.n	800462c <_printf_i+0x16c>
 8004640:	e7b9      	b.n	80045b6 <_printf_i+0xf6>
 8004642:	6813      	ldr	r3, [r2, #0]
 8004644:	6825      	ldr	r5, [r4, #0]
 8004646:	1d18      	adds	r0, r3, #4
 8004648:	6961      	ldr	r1, [r4, #20]
 800464a:	6010      	str	r0, [r2, #0]
 800464c:	0628      	lsls	r0, r5, #24
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	d501      	bpl.n	8004656 <_printf_i+0x196>
 8004652:	6019      	str	r1, [r3, #0]
 8004654:	e002      	b.n	800465c <_printf_i+0x19c>
 8004656:	066a      	lsls	r2, r5, #25
 8004658:	d5fb      	bpl.n	8004652 <_printf_i+0x192>
 800465a:	8019      	strh	r1, [r3, #0]
 800465c:	2300      	movs	r3, #0
 800465e:	4665      	mov	r5, ip
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	e7b9      	b.n	80045d8 <_printf_i+0x118>
 8004664:	6813      	ldr	r3, [r2, #0]
 8004666:	1d19      	adds	r1, r3, #4
 8004668:	6011      	str	r1, [r2, #0]
 800466a:	681d      	ldr	r5, [r3, #0]
 800466c:	6862      	ldr	r2, [r4, #4]
 800466e:	2100      	movs	r1, #0
 8004670:	4628      	mov	r0, r5
 8004672:	f000 f837 	bl	80046e4 <memchr>
 8004676:	b108      	cbz	r0, 800467c <_printf_i+0x1bc>
 8004678:	1b40      	subs	r0, r0, r5
 800467a:	6060      	str	r0, [r4, #4]
 800467c:	6863      	ldr	r3, [r4, #4]
 800467e:	6123      	str	r3, [r4, #16]
 8004680:	2300      	movs	r3, #0
 8004682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004686:	e7a7      	b.n	80045d8 <_printf_i+0x118>
 8004688:	6923      	ldr	r3, [r4, #16]
 800468a:	462a      	mov	r2, r5
 800468c:	4639      	mov	r1, r7
 800468e:	4630      	mov	r0, r6
 8004690:	47c0      	blx	r8
 8004692:	3001      	adds	r0, #1
 8004694:	d0aa      	beq.n	80045ec <_printf_i+0x12c>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	079b      	lsls	r3, r3, #30
 800469a:	d413      	bmi.n	80046c4 <_printf_i+0x204>
 800469c:	68e0      	ldr	r0, [r4, #12]
 800469e:	9b03      	ldr	r3, [sp, #12]
 80046a0:	4298      	cmp	r0, r3
 80046a2:	bfb8      	it	lt
 80046a4:	4618      	movlt	r0, r3
 80046a6:	e7a3      	b.n	80045f0 <_printf_i+0x130>
 80046a8:	2301      	movs	r3, #1
 80046aa:	464a      	mov	r2, r9
 80046ac:	4639      	mov	r1, r7
 80046ae:	4630      	mov	r0, r6
 80046b0:	47c0      	blx	r8
 80046b2:	3001      	adds	r0, #1
 80046b4:	d09a      	beq.n	80045ec <_printf_i+0x12c>
 80046b6:	3501      	adds	r5, #1
 80046b8:	68e3      	ldr	r3, [r4, #12]
 80046ba:	9a03      	ldr	r2, [sp, #12]
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	42ab      	cmp	r3, r5
 80046c0:	dcf2      	bgt.n	80046a8 <_printf_i+0x1e8>
 80046c2:	e7eb      	b.n	800469c <_printf_i+0x1dc>
 80046c4:	2500      	movs	r5, #0
 80046c6:	f104 0919 	add.w	r9, r4, #25
 80046ca:	e7f5      	b.n	80046b8 <_printf_i+0x1f8>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ac      	bne.n	800462a <_printf_i+0x16a>
 80046d0:	7803      	ldrb	r3, [r0, #0]
 80046d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046da:	e76c      	b.n	80045b6 <_printf_i+0xf6>
 80046dc:	08004af1 	.word	0x08004af1
 80046e0:	08004b02 	.word	0x08004b02

080046e4 <memchr>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	b2c9      	uxtb	r1, r1
 80046e8:	4402      	add	r2, r0
 80046ea:	4290      	cmp	r0, r2
 80046ec:	4603      	mov	r3, r0
 80046ee:	d101      	bne.n	80046f4 <memchr+0x10>
 80046f0:	2300      	movs	r3, #0
 80046f2:	e003      	b.n	80046fc <memchr+0x18>
 80046f4:	781c      	ldrb	r4, [r3, #0]
 80046f6:	3001      	adds	r0, #1
 80046f8:	428c      	cmp	r4, r1
 80046fa:	d1f6      	bne.n	80046ea <memchr+0x6>
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd10      	pop	{r4, pc}

08004700 <memcpy>:
 8004700:	b510      	push	{r4, lr}
 8004702:	1e43      	subs	r3, r0, #1
 8004704:	440a      	add	r2, r1
 8004706:	4291      	cmp	r1, r2
 8004708:	d100      	bne.n	800470c <memcpy+0xc>
 800470a:	bd10      	pop	{r4, pc}
 800470c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004714:	e7f7      	b.n	8004706 <memcpy+0x6>

08004716 <memmove>:
 8004716:	4288      	cmp	r0, r1
 8004718:	b510      	push	{r4, lr}
 800471a:	eb01 0302 	add.w	r3, r1, r2
 800471e:	d807      	bhi.n	8004730 <memmove+0x1a>
 8004720:	1e42      	subs	r2, r0, #1
 8004722:	4299      	cmp	r1, r3
 8004724:	d00a      	beq.n	800473c <memmove+0x26>
 8004726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800472a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800472e:	e7f8      	b.n	8004722 <memmove+0xc>
 8004730:	4283      	cmp	r3, r0
 8004732:	d9f5      	bls.n	8004720 <memmove+0xa>
 8004734:	1881      	adds	r1, r0, r2
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	42d3      	cmn	r3, r2
 800473a:	d100      	bne.n	800473e <memmove+0x28>
 800473c:	bd10      	pop	{r4, pc}
 800473e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004742:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004746:	e7f7      	b.n	8004738 <memmove+0x22>

08004748 <_free_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4605      	mov	r5, r0
 800474c:	2900      	cmp	r1, #0
 800474e:	d043      	beq.n	80047d8 <_free_r+0x90>
 8004750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004754:	1f0c      	subs	r4, r1, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfb8      	it	lt
 800475a:	18e4      	addlt	r4, r4, r3
 800475c:	f000 f8d0 	bl	8004900 <__malloc_lock>
 8004760:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <_free_r+0x94>)
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	4610      	mov	r0, r2
 8004766:	b933      	cbnz	r3, 8004776 <_free_r+0x2e>
 8004768:	6063      	str	r3, [r4, #4]
 800476a:	6014      	str	r4, [r2, #0]
 800476c:	4628      	mov	r0, r5
 800476e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004772:	f000 b8c6 	b.w	8004902 <__malloc_unlock>
 8004776:	42a3      	cmp	r3, r4
 8004778:	d90b      	bls.n	8004792 <_free_r+0x4a>
 800477a:	6821      	ldr	r1, [r4, #0]
 800477c:	1862      	adds	r2, r4, r1
 800477e:	4293      	cmp	r3, r2
 8004780:	bf01      	itttt	eq
 8004782:	681a      	ldreq	r2, [r3, #0]
 8004784:	685b      	ldreq	r3, [r3, #4]
 8004786:	1852      	addeq	r2, r2, r1
 8004788:	6022      	streq	r2, [r4, #0]
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6004      	str	r4, [r0, #0]
 800478e:	e7ed      	b.n	800476c <_free_r+0x24>
 8004790:	4613      	mov	r3, r2
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	b10a      	cbz	r2, 800479a <_free_r+0x52>
 8004796:	42a2      	cmp	r2, r4
 8004798:	d9fa      	bls.n	8004790 <_free_r+0x48>
 800479a:	6819      	ldr	r1, [r3, #0]
 800479c:	1858      	adds	r0, r3, r1
 800479e:	42a0      	cmp	r0, r4
 80047a0:	d10b      	bne.n	80047ba <_free_r+0x72>
 80047a2:	6820      	ldr	r0, [r4, #0]
 80047a4:	4401      	add	r1, r0
 80047a6:	1858      	adds	r0, r3, r1
 80047a8:	4282      	cmp	r2, r0
 80047aa:	6019      	str	r1, [r3, #0]
 80047ac:	d1de      	bne.n	800476c <_free_r+0x24>
 80047ae:	6810      	ldr	r0, [r2, #0]
 80047b0:	6852      	ldr	r2, [r2, #4]
 80047b2:	4401      	add	r1, r0
 80047b4:	6019      	str	r1, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	e7d8      	b.n	800476c <_free_r+0x24>
 80047ba:	d902      	bls.n	80047c2 <_free_r+0x7a>
 80047bc:	230c      	movs	r3, #12
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	e7d4      	b.n	800476c <_free_r+0x24>
 80047c2:	6820      	ldr	r0, [r4, #0]
 80047c4:	1821      	adds	r1, r4, r0
 80047c6:	428a      	cmp	r2, r1
 80047c8:	bf01      	itttt	eq
 80047ca:	6811      	ldreq	r1, [r2, #0]
 80047cc:	6852      	ldreq	r2, [r2, #4]
 80047ce:	1809      	addeq	r1, r1, r0
 80047d0:	6021      	streq	r1, [r4, #0]
 80047d2:	6062      	str	r2, [r4, #4]
 80047d4:	605c      	str	r4, [r3, #4]
 80047d6:	e7c9      	b.n	800476c <_free_r+0x24>
 80047d8:	bd38      	pop	{r3, r4, r5, pc}
 80047da:	bf00      	nop
 80047dc:	200000d4 	.word	0x200000d4

080047e0 <_malloc_r>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	1ccd      	adds	r5, r1, #3
 80047e4:	f025 0503 	bic.w	r5, r5, #3
 80047e8:	3508      	adds	r5, #8
 80047ea:	2d0c      	cmp	r5, #12
 80047ec:	bf38      	it	cc
 80047ee:	250c      	movcc	r5, #12
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	4606      	mov	r6, r0
 80047f4:	db01      	blt.n	80047fa <_malloc_r+0x1a>
 80047f6:	42a9      	cmp	r1, r5
 80047f8:	d903      	bls.n	8004802 <_malloc_r+0x22>
 80047fa:	230c      	movs	r3, #12
 80047fc:	6033      	str	r3, [r6, #0]
 80047fe:	2000      	movs	r0, #0
 8004800:	bd70      	pop	{r4, r5, r6, pc}
 8004802:	f000 f87d 	bl	8004900 <__malloc_lock>
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <_malloc_r+0xac>)
 8004808:	6814      	ldr	r4, [r2, #0]
 800480a:	4621      	mov	r1, r4
 800480c:	b991      	cbnz	r1, 8004834 <_malloc_r+0x54>
 800480e:	4c20      	ldr	r4, [pc, #128]	; (8004890 <_malloc_r+0xb0>)
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	b91b      	cbnz	r3, 800481c <_malloc_r+0x3c>
 8004814:	4630      	mov	r0, r6
 8004816:	f000 f863 	bl	80048e0 <_sbrk_r>
 800481a:	6020      	str	r0, [r4, #0]
 800481c:	4629      	mov	r1, r5
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f85e 	bl	80048e0 <_sbrk_r>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d124      	bne.n	8004872 <_malloc_r+0x92>
 8004828:	230c      	movs	r3, #12
 800482a:	4630      	mov	r0, r6
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	f000 f868 	bl	8004902 <__malloc_unlock>
 8004832:	e7e4      	b.n	80047fe <_malloc_r+0x1e>
 8004834:	680b      	ldr	r3, [r1, #0]
 8004836:	1b5b      	subs	r3, r3, r5
 8004838:	d418      	bmi.n	800486c <_malloc_r+0x8c>
 800483a:	2b0b      	cmp	r3, #11
 800483c:	d90f      	bls.n	800485e <_malloc_r+0x7e>
 800483e:	600b      	str	r3, [r1, #0]
 8004840:	18cc      	adds	r4, r1, r3
 8004842:	50cd      	str	r5, [r1, r3]
 8004844:	4630      	mov	r0, r6
 8004846:	f000 f85c 	bl	8004902 <__malloc_unlock>
 800484a:	f104 000b 	add.w	r0, r4, #11
 800484e:	1d23      	adds	r3, r4, #4
 8004850:	f020 0007 	bic.w	r0, r0, #7
 8004854:	1ac3      	subs	r3, r0, r3
 8004856:	d0d3      	beq.n	8004800 <_malloc_r+0x20>
 8004858:	425a      	negs	r2, r3
 800485a:	50e2      	str	r2, [r4, r3]
 800485c:	e7d0      	b.n	8004800 <_malloc_r+0x20>
 800485e:	684b      	ldr	r3, [r1, #4]
 8004860:	428c      	cmp	r4, r1
 8004862:	bf16      	itet	ne
 8004864:	6063      	strne	r3, [r4, #4]
 8004866:	6013      	streq	r3, [r2, #0]
 8004868:	460c      	movne	r4, r1
 800486a:	e7eb      	b.n	8004844 <_malloc_r+0x64>
 800486c:	460c      	mov	r4, r1
 800486e:	6849      	ldr	r1, [r1, #4]
 8004870:	e7cc      	b.n	800480c <_malloc_r+0x2c>
 8004872:	1cc4      	adds	r4, r0, #3
 8004874:	f024 0403 	bic.w	r4, r4, #3
 8004878:	42a0      	cmp	r0, r4
 800487a:	d005      	beq.n	8004888 <_malloc_r+0xa8>
 800487c:	1a21      	subs	r1, r4, r0
 800487e:	4630      	mov	r0, r6
 8004880:	f000 f82e 	bl	80048e0 <_sbrk_r>
 8004884:	3001      	adds	r0, #1
 8004886:	d0cf      	beq.n	8004828 <_malloc_r+0x48>
 8004888:	6025      	str	r5, [r4, #0]
 800488a:	e7db      	b.n	8004844 <_malloc_r+0x64>
 800488c:	200000d4 	.word	0x200000d4
 8004890:	200000d8 	.word	0x200000d8

08004894 <_realloc_r>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	4607      	mov	r7, r0
 8004898:	4614      	mov	r4, r2
 800489a:	460e      	mov	r6, r1
 800489c:	b921      	cbnz	r1, 80048a8 <_realloc_r+0x14>
 800489e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048a2:	4611      	mov	r1, r2
 80048a4:	f7ff bf9c 	b.w	80047e0 <_malloc_r>
 80048a8:	b922      	cbnz	r2, 80048b4 <_realloc_r+0x20>
 80048aa:	f7ff ff4d 	bl	8004748 <_free_r>
 80048ae:	4625      	mov	r5, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b4:	f000 f826 	bl	8004904 <_malloc_usable_size_r>
 80048b8:	42a0      	cmp	r0, r4
 80048ba:	d20f      	bcs.n	80048dc <_realloc_r+0x48>
 80048bc:	4621      	mov	r1, r4
 80048be:	4638      	mov	r0, r7
 80048c0:	f7ff ff8e 	bl	80047e0 <_malloc_r>
 80048c4:	4605      	mov	r5, r0
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d0f2      	beq.n	80048b0 <_realloc_r+0x1c>
 80048ca:	4631      	mov	r1, r6
 80048cc:	4622      	mov	r2, r4
 80048ce:	f7ff ff17 	bl	8004700 <memcpy>
 80048d2:	4631      	mov	r1, r6
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7ff ff37 	bl	8004748 <_free_r>
 80048da:	e7e9      	b.n	80048b0 <_realloc_r+0x1c>
 80048dc:	4635      	mov	r5, r6
 80048de:	e7e7      	b.n	80048b0 <_realloc_r+0x1c>

080048e0 <_sbrk_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	2300      	movs	r3, #0
 80048e4:	4c05      	ldr	r4, [pc, #20]	; (80048fc <_sbrk_r+0x1c>)
 80048e6:	4605      	mov	r5, r0
 80048e8:	4608      	mov	r0, r1
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	f7fd fa70 	bl	8001dd0 <_sbrk>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d102      	bne.n	80048fa <_sbrk_r+0x1a>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	b103      	cbz	r3, 80048fa <_sbrk_r+0x1a>
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
 80048fc:	20000154 	.word	0x20000154

08004900 <__malloc_lock>:
 8004900:	4770      	bx	lr

08004902 <__malloc_unlock>:
 8004902:	4770      	bx	lr

08004904 <_malloc_usable_size_r>:
 8004904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004908:	1f18      	subs	r0, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	bfbc      	itt	lt
 800490e:	580b      	ldrlt	r3, [r1, r0]
 8004910:	18c0      	addlt	r0, r0, r3
 8004912:	4770      	bx	lr

08004914 <_init>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr

08004920 <_fini>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr
